!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const e={};class t{constructor(){this.db=null,this.isLoaded=!1,this.queryCache=new Map,this.SQL=null}async initialize(){try{console.log("Initializing sql.js...");const n=(await function(t,n){let i=Promise.resolve();if(n&&n.length>0){let t=function(e){return Promise.all(e.map(e=>Promise.resolve(e).then(e=>({status:"fulfilled",value:e}),e=>({status:"rejected",reason:e}))))};document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),o=s?.nonce||s?.getAttribute("nonce");i=t(n.map(t=>{if((t=function(e){return"/woaiios/"+e}(t))in e)return;e[t]=!0;const n=t.endsWith(".css"),i=n?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${i}`))return;const s=document.createElement("link");return s.rel=n?"stylesheet":"modulepreload",n||(s.as="script"),s.crossOrigin="",s.href=t,o&&s.setAttribute("nonce",o),document.head.appendChild(s),n?new Promise((e,n)=>{s.addEventListener("load",e),s.addEventListener("error",()=>n(new Error(`Unable to preload CSS for ${t}`)))}):void 0}))}function s(e){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e}return i.then(e=>{for(const t of e||[])"rejected"===t.status&&s(t.reason);return t().catch(s)})}(async()=>{const{default:e}=await import("./sql-wasm-BKnWKaoM.js").then(e=>e.s);return{default:e}},[])).default;this.SQL=await n({locateFile:e=>`/woaiios/assets/${e}`}),console.log("Loading ECDICT database (stardict.db)...");const i="/woaiios/stardict.db";console.log(`Fetching database from: ${i}`);const s=await fetch(i);if(!s.ok)throw new Error(`Failed to load database: ${s.status} ${s.statusText}`);const o=await s.arrayBuffer(),a=new Uint8Array(o);console.log(`Database file loaded, size: ${(o.byteLength/1024/1024).toFixed(2)} MB`),this.db=new this.SQL.Database(a);const r=this.db.exec("SELECT COUNT(*) as count FROM words LIMIT 1");if(r.length>0){const e=r[0].values[0][0];console.log(`ECDICT database loaded successfully with ${e.toLocaleString()} words`)}try{this.db.exec("\n                    CREATE INDEX IF NOT EXISTS idx_word ON words(word);\n                "),console.log("Database indexes created")}catch(t){console.log("Indexes already exist or cannot be created:",t.message)}return this.isLoaded=!0,!0}catch(n){return console.error("Error loading ECDICT database:",n),this.isLoaded=!1,!1}}queryWord(e){if(!this.isLoaded||!this.db)return null;const t=e.toLowerCase();if(this.queryCache.has(t))return this.queryCache.get(t);try{const e=this.db.exec("SELECT word, phonetic, definition, translation, pos, collins, oxford, tag, bnc, frq, exchange, detail \n                 FROM words \n                 WHERE LOWER(word) = ? \n                 LIMIT 1",[t]);if(e.length>0&&e[0].values.length>0){const n=e[0].values[0],i={word:n[0],phonetic:n[1]||"",definition:n[2]||"",translation:n[3]||"",pos:n[4]||"",collins:parseInt(n[5])||0,oxford:"1"===n[6]||1===n[6],tag:n[7]||"",bnc:parseInt(n[8])||0,frq:parseInt(n[9])||0,exchange:n[10]||"",detail:n[11]||""};if(this.queryCache.set(t,i),this.queryCache.size>1e4){const e=this.queryCache.keys().next().value;this.queryCache.delete(e)}return i}return null}catch(n){return console.error("Error querying word:",e,n),null}}parseExchange(e){const t={p:null,d:null,i:null,3:null,r:null,t:null,s:null,0:null,1:null};if(!e)return t;const n=e.split("/");for(const i of n){const[e,n]=i.split(":");e&&n&&(t[e]=n)}return t}getWordDifficulty(e){const t=this.queryWord(e);if(!t)return{level:"common",score:0,className:"common",info:null};let n="expert",i=100;const s=t.tag||"";return 1===t.oxford?(n="common",i=0):t.collins>=5?(n="common",i=10):t.collins>=4||s.includes("zk")||s.includes("gk")||s.includes("cet4")?(n="beginner",i=25):t.collins>=3||s.includes("cet6")?(n="intermediate",i=50):t.collins>=1||s.includes("ielts")||s.includes("toefl")?(n="advanced",i=75):t.bnc>0&&t.bnc<2e4?(n="common",i=15):t.bnc>0&&t.bnc<5e4?(n="beginner",i=30):t.bnc>0&&t.bnc<1e5&&(n="intermediate",i=55),{level:n,score:i,className:n,info:t}}findByLemma(e){if(!this.isLoaded||!this.db)return null;try{const t=this.db.exec("SELECT word, exchange \n                 FROM words \n                 WHERE exchange LIKE ? \n                 LIMIT 10",[`%${e}%`]);if(t.length>0&&t[0].values.length>0)for(const n of t[0].values){const t=n[0],i=n[1],s=this.parseExchange(i);for(const n of Object.values(s))if(n&&n.toLowerCase()===e.toLowerCase())return this.queryWord(t)}return null}catch(t){return console.error("Error finding lemma:",t),null}}fuzzyMatch(e,t=10){if(!this.isLoaded||!this.db)return[];try{const n=e.toLowerCase(),i=this.db.exec("SELECT word, phonetic, translation \n                 FROM words \n                 WHERE LOWER(word) LIKE ? \n                 LIMIT ?",[`${n}%`,t]);return i.length>0&&i[0].values.length>0?i[0].values.map(e=>({word:e[0],phonetic:e[1]||"",translation:e[2]||""})):[]}catch(n){return console.error("Error fuzzy matching:",n),[]}}isDatabaseLoaded(){return this.isLoaded}close(){this.db&&(this.db.close(),this.db=null,this.isLoaded=!1)}}class n{constructor(e,t){this.wordDatabase=e,this.translationService=t,this.tokenizer=null,this.loadTokenizer()}async loadTokenizer(){try{if(!Intl.Segmenter)throw new Error("Intl.Segmenter not supported in this browser");this.tokenizer=new Intl.Segmenter(void 0,{granularity:"word"}),console.log("Intl.Segmenter loaded successfully")}catch(e){console.warn("Error loading Intl.Segmenter, falling back to simple extraction:",e),this.tokenizer={tokenize:e=>e.split(/\s+/).map(e=>({value:e,tag:"word"}))}}}extractWords(e){if(this.tokenizer&&this.tokenizer.segment){const t=this.tokenizer.segment(e);return Array.from(t).filter(e=>e.isWordLike).map(e=>e.segment).filter(e=>e.length>1).filter(e=>/^[a-zA-Z]+$/.test(e))}return e.split(/\s+/).filter(e=>e.length>1).filter(e=>/^[a-zA-Z]+$/.test(e))}analyzeWords(e,t,n,i){const s={totalWords:e.length,highlightedWords:[],newWords:[],difficultyScore:0,wordFrequency:{}},{learning:o,mastered:a}=i;e.forEach(e=>{const t=e.toLowerCase();s.wordFrequency[t]=(s.wordFrequency[t]||0)+1});const r=[...new Set(e.map(e=>e.toLowerCase()))];return r.forEach(i=>{const r=e.find(e=>e.toLowerCase()===i)||i,l=this.wordDatabase.getWordDifficulty(i),d=a.has(i),c=o.has(i);!d&&(c||this.shouldHighlight(i,l,n,o,t))&&(s.highlightedWords.push({word:r,difficulty:l,frequency:s.wordFrequency[i],translation:this.getTranslation(r)}),o.has(i)||s.newWords.push(i)),s.difficultyScore+=l.score}),s.difficultyScore=r.length>0?Math.round(s.difficultyScore/r.length):0,s}shouldHighlight(e,t,n,i,s){const o={common:0,beginner:1,intermediate:2,advanced:3,expert:4,unknown:5},a=o[t.level]>o[s];switch(n){case"unknown":return a&&!i.has(e);case"difficult":return a;case"all":return!0;default:return!1}}getTranslation(e){if(!this.wordDatabase.isDatabaseLoaded())return'<div class="word-info"><p>数据库未加载</p></div>';const t=e.toLowerCase();let n=this.wordDatabase.queryWord(t);if(n||(n=this.wordDatabase.findByLemma(t)),!n)return`<div class="word-info">\n                <h3>${e}</h3>\n                <p class="no-translation">未找到释义</p>\n            </div>`;let i='<div class="word-info ecdict-entry">';if(i+=`<h3>${n.word}`,n.phonetic&&(i+=` <span class="phonetic">/${n.phonetic}/</span>`),i+="</h3>",(n.collins>0||n.oxford)&&(i+='<div class="word-meta">',n.collins>0&&(i+=`<span class="collins-stars">${"★".repeat(n.collins)}</span>`),n.oxford&&(i+='<span class="oxford-badge">Oxford 3000</span>'),i+="</div>"),n.tag){const e=n.tag.split(" ").filter(e=>e);if(e.length>0){i+='<div class="word-tags">';const t={zk:"中考",gk:"高考",cet4:"CET-4",cet6:"CET-6",ielts:"IELTS",toefl:"TOEFL",gre:"GRE",tem4:"TEM-4",tem8:"TEM-8"};e.forEach(e=>{const n=t[e]||e;i+=`<span class="tag">${n}</span>`}),i+="</div>"}}if(n.translation){i+='<div class="translation">';n.translation.split("\\n").forEach(e=>{e.trim()&&(i+=`<p>${this.escapeHtml(e)}</p>`)}),i+="</div>"}if(n.definition){i+='<div class="definition">',i+="<h4>Definition:</h4>";n.definition.split("\\n").forEach(e=>{e.trim()&&(i+=`<p>${this.escapeHtml(e)}</p>`)}),i+="</div>"}if(n.exchange){const e=this.wordDatabase.parseExchange(n.exchange),t={p:"过去式",d:"过去分词",i:"现在分词",3:"第三人称单数",r:"比较级",t:"最高级",s:"复数",0:"原形"},s=[];for(const[n,i]of Object.entries(e))i&&t[n]&&s.push(`${t[n]}: ${i}`);s.length>0&&(i+='<div class="word-forms">',i+="<h4>词形变化:</h4>",i+=`<p>${s.join(" | ")}</p>`,i+="</div>")}return(n.bnc>0||n.frq>0)&&(i+='<div class="word-frequency">',n.bnc>0&&(i+=`<span>BNC词频: ${n.bnc.toLocaleString()}</span>`),n.frq>0&&(i+=`<span>当代词频: ${n.frq.toLocaleString()}</span>`),i+="</div>"),i+="</div>",i}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}processTextForDisplay(e,t){const n=new Map(t.highlightedWords.map(e=>[e.word.toLowerCase(),e]));return e.split(/(\b[a-zA-Z-]+\b)/).map(e=>{const t=e.toLowerCase();if(!/\b[a-zA-Z-]+\b/.test(t))return e;const i=n.get(t),s=this.getTranslation(e);let o="word-span";i&&(o+=` highlighted-word ${i.difficulty.className}`);return`<span class="${o}" data-word="${e}" data-translation="${s.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}">${e}</span>`}).join("")}calculateComplexityMetrics(e,t){const n=[...new Set(e)],i={totalWords:e.length,uniqueWords:n.length,averageWordLength:0,difficultyDistribution:{common:0,beginner:0,intermediate:0,advanced:0,expert:0}},s=e.reduce((e,t)=>e+t.length,0);return i.averageWordLength=Math.round(s/e.length*10)/10,n.forEach(e=>{const n=this.wordDatabase.getWordDifficulty(e,t);i.difficultyDistribution[n.level]++}),i}}class i{constructor(){this.clientId="781460731280-7moak9c5fq75dubjlnmes4b4gdku3qvt.apps.googleusercontent.com",this.scopes="https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",this.isInitialized=!1,this.isSignedIn=!1,this.accessToken=null,this.fileId=null,this.gapiLoaded=!1}async initialize(){try{return await this._waitForGoogleIdentityServices(),await this._loadGoogleAPIClient(),this.isInitialized=!0,console.log("Google Drive API initialized successfully"),!0}catch(e){return console.error("Error initializing Google Drive API:",e),!1}}async signIn(e=!1){try{this.isInitialized||await this.initialize();const t=await this._getToken(e);return this.accessToken=t.access_token,this.isSignedIn=!0,await this._initializeGoogleAPIClient(),await this.findOrCreateVocabularyFile(),console.log("Successfully signed in to Google"),!0}catch(t){return console.error("Error signing in:",t),this.isSignedIn=!1,!1}}async signOut(){try{return this.accessToken&&window.google.accounts.oauth2.revoke(this.accessToken),this.isSignedIn=!1,this.accessToken=null,this.fileId=null,console.log("Successfully signed out from Google"),!0}catch(e){return console.error("Error signing out:",e),!1}}async findOrCreateVocabularyFile(){try{let e=await this._findFileInSpace("drive");return e?(this.fileId=e.id,console.log("Found existing vocabulary file in drive:",this.fileId),this.fileId):(e=await this._findFileInSpace("appDataFolder"),e?(this.fileId=e.id,console.warn("Found vocabulary file in hidden appDataFolder."),this.fileId):(this.fileId=await this._createFile(),console.log("Created new vocabulary file in root directory:",this.fileId),this.fileId))}catch(e){return console.error("Error finding/creating vocabulary file:",e),null}}async uploadVocabulary(e){try{if(!this.isSignedIn||!this.fileId)throw new Error("Not signed in or file not found");const t=JSON.stringify(e,null,2);return await gapi.client.request({path:`/upload/drive/v3/files/${this.fileId}`,method:"PATCH",params:{uploadType:"media"},headers:{"Content-Type":"application/json"},body:t}),console.log("Vocabulary uploaded successfully to Google Drive"),!0}catch(t){return console.error("Error uploading vocabulary:",t),403===t.status&&(console.log("Attempting to refresh access token..."),await this.refreshAccessToken(),this.uploadVocabulary(e))}}async downloadVocabulary(){if(!this.isSignedIn||!this.fileId)throw new Error("Not signed in or file not found");try{const e=await gapi.client.drive.files.get({fileId:this.fileId,alt:"media"});return e.body?(console.log("Vocabulary downloaded successfully from Google Drive"),JSON.parse(e.body)):null}catch(e){return console.error("Error downloading vocabulary:",e),null}}async syncVocabulary(e){if(!this.isSignedIn)return{success:!1,error:"Not signed in to Google"};try{const t=await this.downloadVocabulary();if(!t||!t.version){console.log("No remote data or old format found. Uploading local data.");return{success:await this.uploadVocabulary(e),action:"upload",data:e}}const n=this._mergeVocabularies(e,t);return await this.uploadVocabulary(n)?{success:!0,action:"merge",data:n}:{success:!1,action:"merge_fail",data:e,error:"Failed to upload merged vocabulary"}}catch(t){return console.error("Error syncing vocabulary:",t),{success:!1,error:t.message}}}getAuthStatus(){return{isInitialized:this.isInitialized,isSignedIn:this.isSignedIn,hasFile:!!this.fileId}}async getUserInfo(){if(!this.isSignedIn)return null;try{const e=(await gapi.client.people.people.get({resourceName:"people/me",personFields:"names,emailAddresses,photos"})).result;return{name:e.names&&e.names[0]?e.names[0].displayName:"Google User",email:e.emailAddresses&&e.emailAddresses[0]?e.emailAddresses[0].value:"",imageUrl:e.photos&&e.photos[0]?e.photos[0].url:null}}catch(e){return console.error("Error getting user info:",e),null}}_getToken(e=!1){return new Promise((t,n)=>{window.google.accounts.oauth2.initTokenClient({client_id:this.clientId,scope:this.scopes,callback:e=>e.error?n(new Error(e.error_description)):t(e)}).requestAccessToken({prompt:e?"none":""})})}async refreshAccessToken(){try{const e=await this._getToken(!0);return this.accessToken=e.access_token,gapi.client.setToken({access_token:this.accessToken}),console.log("Access token refreshed successfully"),!0}catch(e){return console.error("Token refresh error:",e),this.isSignedIn=!1,!1}}_waitForGoogleIdentityServices(){return new Promise((e,t)=>{if(window.google&&window.google.accounts)return e();const n=setTimeout(()=>t(new Error("Google Identity Services failed to load")),1e4),i=setInterval(()=>{window.google&&window.google.accounts&&(clearTimeout(n),clearInterval(i),e())},100)})}_loadGoogleAPIClient(){return new Promise((e,t)=>{if(window.gapi&&window.gapi.client)return e();const n=document.createElement("script");n.src="https://apis.google.com/js/api.js",n.onload=()=>gapi.load("client",e),n.onerror=t,document.head.appendChild(n)})}async _initializeGoogleAPIClient(){await gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest","https://people.googleapis.com/$discovery/rest?version=v1"]}),gapi.client.setToken({access_token:this.accessToken})}async _findFileInSpace(e){const t=await gapi.client.drive.files.list({q:"name='WordDiscoverer_Vocabulary.json' and trashed=false",spaces:e,fields:"files(id, name)"});return t.result.files&&t.result.files.length>0?t.result.files[0]:null}async _createFile(){return(await gapi.client.drive.files.create({resource:{name:"WordDiscoverer_Vocabulary.json",parents:["root"]},fields:"id"})).result.id}_mergeVocabularies(e,t){console.log("Performing two-way merge for vocabulary v2.0");const n=new Map(e.learningWords||[]),i=new Map(e.masteredWords||[]),s=new Map(t.learningWords||t.vocabulary||[]),o=new Map(t.masteredWords||[]),a=new Map([...s,...n]),r=new Map([...o,...i]);for(const l of i.keys())a.has(l)&&a.delete(l);for(const l of n.keys())r.has(l)&&r.delete(l);return{version:"2.0",exportDate:(new Date).toISOString(),learningWords:Array.from(a.entries()),masteredWords:Array.from(r.entries())}}}class s{constructor(){const{learningWords:e,masteredWords:t}=this.loadVocabulary();this.learningWords=e,this.masteredWords=t,this.googleDriveManager=new i,this.syncEnabled=!1,this.lastSyncTime=null,this.isSyncing=!1}addWord(e,t){return!this.isKnownWord(e)&&(this.learningWords.set(e,{translation:t,addedDate:(new Date).toISOString(),reviewCount:0,lastReviewed:null}),this.saveVocabulary(),!0)}masterWord(e,t){const n=e.toLowerCase();if(this.masteredWords.has(n))return"already_mastered";let i;return this.learningWords.has(n)?(i=this.learningWords.get(n),this.learningWords.delete(n),this.masteredWords.set(n,i),this.saveVocabulary(),"moved_to_mastered"):(i={translation:t,addedDate:(new Date).toISOString(),reviewCount:0,lastReviewed:null},this.masteredWords.set(n,i),this.saveVocabulary(),"added_to_mastered")}unmasterWord(e){const t=e.toLowerCase();if(this.masteredWords.has(t)){const e=this.masteredWords.get(t);return this.masteredWords.delete(t),this.learningWords.set(t,e),this.saveVocabulary(),"moved_to_learning"}return!1}removeWord(e){return this.learningWords.has(e)?(this.learningWords.delete(e),this.saveVocabulary(),!0):!!this.masteredWords.has(e)&&(this.masteredWords.delete(e),this.saveVocabulary(),!0)}isKnownWord(e){return this.learningWords.has(e)||this.masteredWords.has(e)}isMasteredWord(e){return this.masteredWords.has(e)}getWordData(e){return this.learningWords.get(e)||this.masteredWords.get(e)||null}getLearningWords(){return Array.from(this.learningWords.entries())}getMasteredWords(){return Array.from(this.masteredWords.entries())}getLearningSize(){return this.learningWords.size}getTotalSize(){return this.learningWords.size+this.masteredWords.size}clearVocabulary(){return this.learningWords.clear(),this.masteredWords.clear(),this.saveVocabulary(),!0}getSortedByDate(e){return Array.from(e.entries()).sort((e,t)=>new Date(t[1].addedDate)-new Date(e[1].addedDate))}updateReviewCount(e){const t=this.learningWords.get(e);return!!t&&(t.reviewCount++,t.lastReviewed=(new Date).toISOString(),this.saveVocabulary(),!0)}exportVocabulary(){return{version:"2.0",exportDate:(new Date).toISOString(),learningWords:Array.from(this.learningWords.entries()),masteredWords:Array.from(this.masteredWords.entries())}}importVocabulary(e){try{if("2.0"===e.version&&e.learningWords)this.learningWords=new Map(e.learningWords||[]),this.masteredWords=new Map(e.masteredWords||[]);else{if(!e.vocabulary||!Array.isArray(e.vocabulary))return!1;this.learningWords=new Map(e.vocabulary),this.masteredWords=new Map}return this.saveVocabulary(),!0}catch(t){return console.error("Error importing vocabulary:",t),!1}}getStatistics(){const e=[...Array.from(this.learningWords.values()),...Array.from(this.masteredWords.values())].reduce((e,t)=>e+t.reviewCount,0);return{learningWords:this.learningWords.size,masteredWords:this.masteredWords.size,totalWords:this.getTotalSize(),totalReviews:e}}loadVocabulary(){const e=localStorage.getItem("wordDiscovererVocabulary");if(!e)return{learningWords:new Map,masteredWords:new Map};try{const t=JSON.parse(e);if("2.0"===t.version)return{learningWords:new Map(t.learningWords||[]),masteredWords:new Map(t.masteredWords||[])};if(Array.isArray(t))return console.log("Migrating old vocabulary format to new v2.0 format."),{learningWords:new Map(t),masteredWords:new Map}}catch(t){console.error("Error loading vocabulary:",t)}return{learningWords:new Map,masteredWords:new Map}}saveVocabulary(){const e={version:"2.0",learningWords:Array.from(this.learningWords.entries()),masteredWords:Array.from(this.masteredWords.entries())};localStorage.setItem("wordDiscovererVocabulary",JSON.stringify(e)),this.syncEnabled&&!this.isSyncing&&this.syncToGoogleDrive()}async initializeGoogleDrive(){try{const e=await this.googleDriveManager.initialize();return e&&console.log("Google Drive integration initialized"),e}catch(e){return console.error("Error initializing Google Drive:",e),!1}}async enableGoogleDriveSync(e=!1){try{this.googleDriveManager.isInitialized||await this.initializeGoogleDrive();return!!(await this.googleDriveManager.signIn(e))&&(this.syncEnabled=!0,await this.syncToGoogleDrive(),console.log("Google Drive sync enabled"),!0)}catch(t){return console.error("Error enabling Google Drive sync:",t),!1}}async disableGoogleDriveSync(){try{return this.syncEnabled=!1,await this.googleDriveManager.signOut(),console.log("Google Drive sync disabled"),!0}catch(e){return console.error("Error disabling Google Drive sync:",e),!1}}async syncToGoogleDrive(){if(!this.syncEnabled||!this.googleDriveManager.isSignedIn||this.isSyncing)return!1;this.isSyncing=!0;try{const e=this.exportVocabulary(),t=await this.googleDriveManager.syncVocabulary(e);return t.success?("merge"===t.action?(this.importVocabulary(t.data),console.log("Vocabulary merged and synced with Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis()):"download"===t.action?(this.importVocabulary(t.data),console.log("Vocabulary synced from Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis()):"upload"===t.action&&console.log("Vocabulary uploaded to Google Drive"),this.lastSyncTime=(new Date).toISOString(),!0):(console.error("Sync failed:",t.error),!1)}catch(e){return console.error("Error syncing to Google Drive:",e),!1}finally{this.isSyncing=!1}}async forceSyncFromGoogleDrive(){try{if(!this.googleDriveManager.isSignedIn)return!1;const e=await this.googleDriveManager.downloadVocabulary();return!!e&&(this.importVocabulary(e),this.lastSyncTime=(new Date).toISOString(),console.log("Vocabulary force synced from Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis(),!0)}catch(e){return console.error("Error force syncing from Google Drive:",e),!1}}async getGoogleDriveStatus(){const e=this.googleDriveManager.getAuthStatus(),t=await this.googleDriveManager.getUserInfo();return{syncEnabled:this.syncEnabled,isSignedIn:e.isSignedIn,hasFile:e.hasFile,lastSyncTime:this.lastSyncTime,userInfo:t}}getGoogleDriveManager(){return this.googleDriveManager}}class o{constructor(){this.settings=this.loadSettings()}getSetting(e){return this.settings[e]}setSetting(e,t){this.settings[e]=t,this.saveSettings()}getAllSettings(){return{...this.settings}}updateSettings(e){this.settings={...this.settings,...e},this.saveSettings()}resetToDefault(){this.settings=this.getDefaultSettings(),this.saveSettings()}exportSettings(){return{settings:this.settings,exportDate:(new Date).toISOString(),version:"1.0"}}importSettings(e){try{return!(!e.settings||"object"!=typeof e.settings)&&(this.settings={...this.getDefaultSettings(),...e.settings},this.saveSettings(),!0)}catch(t){return console.error("Error importing settings:",t),!1}}getDefaultSettings(){return{highlightColor:"#ffeb3b",highlightOpacity:.7,translationService:"bing",targetLanguage:"zh",difficultyLevel:"intermediate",highlightMode:"unknown",autoSave:!0,showTooltips:!0,theme:"light",fontSize:"medium",enableNotifications:!0,reviewReminder:!0,reviewInterval:7,googleDriveSync:!1}}validateSetting(e,t){const n={highlightColor:e=>/^#[0-9A-F]{6}$/i.test(e),highlightOpacity:e=>"number"==typeof e&&e>=0&&e<=1,translationService:e=>["bing","google","yandex"].includes(e),targetLanguage:e=>"string"==typeof e&&2===e.length,difficultyLevel:e=>["common","beginner","intermediate","advanced","expert"].includes(e),highlightMode:e=>["unknown","difficult","all"].includes(e),autoSave:e=>"boolean"==typeof e,showTooltips:e=>"boolean"==typeof e,theme:e=>["light","dark"].includes(e),fontSize:e=>["small","medium","large"].includes(e),enableNotifications:e=>"boolean"==typeof e,reviewReminder:e=>"boolean"==typeof e,reviewInterval:e=>"number"==typeof e&&e>0}[e];return!n||n(t)}getSettingMetadata(e){return{highlightColor:{type:"color",label:"Highlight Color",description:"Color used for highlighting words"},highlightOpacity:{type:"range",label:"Highlight Opacity",description:"Transparency of highlighted words",min:0,max:1,step:.1},translationService:{type:"select",label:"Translation Service",description:"Service used for translations",options:[{value:"bing",label:"Bing Translator"},{value:"google",label:"Google Translate"},{value:"yandex",label:"Yandex Translate"}]},targetLanguage:{type:"text",label:"Target Language",description:"Language code for translations (e.g., zh, es, fr)"},difficultyLevel:{type:"select",label:"Difficulty Level",description:"Base difficulty level for analysis",options:[{value:"common",label:"Common"},{value:"beginner",label:"Beginner"},{value:"intermediate",label:"Intermediate"},{value:"advanced",label:"Advanced"},{value:"expert",label:"Expert"}]},highlightMode:{type:"select",label:"Highlight Mode",description:"Which words to highlight",options:[{value:"unknown",label:"Unknown Words Only"},{value:"difficult",label:"Difficult Words"},{value:"all",label:"All Words"}]},theme:{type:"select",label:"Theme",description:"Application theme",options:[{value:"light",label:"Light"},{value:"dark",label:"Dark"}]},fontSize:{type:"select",label:"Font Size",description:"Text size preference",options:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}]}}[e]||null}loadSettings(){const e=this.getDefaultSettings(),t=localStorage.getItem("wordDiscovererSettings");if(t)try{const n=JSON.parse(t);return{...e,...n}}catch(n){console.error("Error loading settings:",n)}return e}saveSettings(){localStorage.setItem("wordDiscovererSettings",JSON.stringify(this.settings))}}class a{constructor(e){this.element="string"==typeof e?document.querySelector(e):e}addEventListener(e,t,n){const i=this.element.querySelector(e);i&&i.addEventListener(t,n.bind(this))}show(){this.element&&(this.element.style.display="block")}hide(){this.element&&(this.element.style.display="none")}}class r extends a{constructor(e,t){super(e),this.title=t,this.modalContent=null,this.element.innerHTML=this.render(),this.modalContent=this.element.querySelector(".modal-content"),this.element.addEventListener("click",e=>{e.target===this.element&&this.close()});const n=this.element.querySelector(".close-btn");n&&n.addEventListener("click",()=>this.close())}render(){return`\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h2>${this.title}</h2>\n                    <button class="close-btn"><i class="fas fa-times"></i></button>\n                </div>\n                <div class="modal-body">\n                    \x3c!-- Content will be injected here --\x3e\n                </div>\n            </div>\n        `}open(e){const t=this.element.querySelector(".modal-body");t&&(t.innerHTML=e),this.element.offsetHeight,this.element.classList.add("show"),requestAnimationFrame(()=>{this.calculatePosition()})}close(){this.element.classList.remove("show")}calculatePosition(){const e=this.modalContent;if(!e)return;e.style.marginTop="",e.style.marginBottom="",e.offsetHeight;const t=window.innerHeight,n=e.offsetHeight;if(n<t){const i=Math.max(10,(t-n)/2);e.style.marginTop=`${i}px`,e.style.marginBottom="auto"}else e.style.marginTop="10px",e.style.marginBottom="10px"}}class l{constructor(e){this.vocabularyManager=e,this.modal=new r("#vocabularyModal","My Vocabulary"),this.app=null}setApp(e){this.app=e}open(){this.modal.open(this.renderContent()),this.addEventListeners(),this.updateAndRenderLists()}addEventListeners(){document.querySelectorAll(".vocab-tab").forEach(e=>{e.addEventListener("click",e=>this.handleTabClick(e))}),document.getElementById("exportVocabBtn").addEventListener("click",()=>this.onExportVocabulary()),document.getElementById("importVocabBtn").addEventListener("click",()=>document.getElementById("importFile").click()),document.getElementById("importFile").addEventListener("change",e=>this.onImportFileChange(e)),document.getElementById("clearVocabBtn").addEventListener("click",()=>this.onClearVocabulary())}renderContent(){return'\n            <div class="vocab-controls">\n                <button class="btn btn-primary" id="exportVocabBtn"><i class="fas fa-download"></i> Export</button>\n                <button class="btn btn-secondary" id="importVocabBtn"><i class="fas fa-upload"></i> Import</button>\n                <input type="file" id="importFile" accept=".json" style="display: none;">\n                <button class="btn btn-danger" id="clearVocabBtn"><i class="fas fa-trash"></i> Clear All</button>\n            </div>\n            <div class="vocab-tabs">\n                <button class="vocab-tab active" data-tab="learning">Learning (<span id="learning-count">0</span>)</button>\n                <button class="vocab-tab" data-tab="mastered">Mastered (<span id="mastered-count">0</span>)</button>\n            </div>\n            <div id="learning-list-container" class="vocab-tab-content active">\n                <div class="vocab-list" id="learning-list"></div>\n            </div>\n            <div id="mastered-list-container" class="vocab-tab-content">\n                <div class="vocab-list" id="mastered-list"></div>\n            </div>\n        '}updateAndRenderLists(){const e=document.getElementById("learning-list"),t=document.getElementById("mastered-list");if(!e||!t)return;const n=this.vocabularyManager.getSortedByDate(this.vocabularyManager.learningWords);this.renderList(e,n,"learning");const i=this.vocabularyManager.getSortedByDate(this.vocabularyManager.masteredWords);this.renderList(t,i,"mastered"),this.updateCounts()}renderList(e,t,n){e.innerHTML="",0!==t.length?(t.forEach(([t,i])=>{const s="learning"===n?`<button class="btn btn-sm btn-success master-btn" data-word="${t}"><i class="fas fa-check"></i> Master</button>`:`<button class="btn btn-sm btn-info unmaster-btn" data-word="${t}"><i class="fas fa-undo"></i> Learn</button>`,o=document.createElement("div");o.className="vocab-item",o.innerHTML=`\n                <div>\n                    <div class="vocab-word">${t}</div>\n                    <div class="vocab-translation">${i.translation}</div>\n                    <div class="vocab-meta">Added: ${new Date(i.addedDate).toLocaleDateString()}</div>\n                </div>\n                <div class="vocab-actions">\n                    ${s}\n                    <button class="btn btn-sm btn-danger delete-btn" data-word="${t}"><i class="fas fa-trash"></i></button>\n                </div>\n            `,e.appendChild(o)}),e.querySelectorAll(".master-btn").forEach(e=>e.addEventListener("click",e=>this.masterWord(e.currentTarget.dataset.word))),e.querySelectorAll(".unmaster-btn").forEach(e=>e.addEventListener("click",e=>this.unmasterWord(e.currentTarget.dataset.word))),e.querySelectorAll(".delete-btn").forEach(e=>e.addEventListener("click",e=>this.removeFromVocabulary(e.currentTarget.dataset.word)))):e.innerHTML='<p style="text-align: center; color: #6b7280; padding: 2rem;">No words in this list yet.</p>'}updateCounts(){const e=this.vocabularyManager.getLearningSize(),t=this.vocabularyManager.masteredWords.size,n=document.getElementById("vocabCount");n&&(n.textContent=e);const i=document.getElementById("learning-count");i&&(i.textContent=e);const s=document.getElementById("mastered-count");s&&(s.textContent=t)}handleTabClick(e){const t=e.target,n=t.dataset.tab;document.querySelectorAll(".vocab-tab").forEach(e=>e.classList.remove("active")),t.classList.add("active"),document.querySelectorAll(".vocab-tab-content").forEach(e=>e.classList.remove("active")),document.getElementById(`${n}-list-container`).classList.add("active")}masterWord(e){this.vocabularyManager.masterWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' moved to mastered list.`),this.app.refreshTextAnalysis())}unmasterWord(e){this.vocabularyManager.unmasterWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' moved back to learning list.`),this.app.refreshTextAnalysis())}removeFromVocabulary(e){confirm(`Are you sure you want to permanently delete "${e}"?`)&&this.vocabularyManager.removeWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' has been deleted.`,"info"),this.app.refreshTextAnalysis())}onExportVocabulary(){const e=this.vocabularyManager.exportVocabulary();this.app.downloadJSON(e,"word-discoverer-vocabulary.json"),this.app.showNotification("Vocabulary exported successfully!")}onImportFileChange(e){const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target.result);this.vocabularyManager.importVocabulary(t)?(this.updateAndRenderLists(),this.app.showNotification("Vocabulary imported successfully!"),this.app.refreshTextAnalysis()):this.app.showNotification("Error importing vocabulary. Check file format.","error")}catch(t){this.app.showNotification("Error importing vocabulary. Check file format.","error")}},n.readAsText(t)}onClearVocabulary(){confirm("Clear all vocabulary (both learning and mastered)? This action cannot be undone.")&&(this.vocabularyManager.clearVocabulary(),this.updateAndRenderLists(),this.app.showNotification("All vocabulary has been cleared."),this.app.refreshTextAnalysis())}}class d{constructor(e,t){this.settingsManager=e,this.googleDriveManager=t,this.modal=new r("#settingsModal","Settings"),this.app=null,this.userInfo=null,this.lastSyncTime=null}setApp(e){this.app=e}open(){this.modal.open(this.renderContent()),this.loadSettingsToUI(),this.addEventListeners(),this.updateGoogleDriveStatus()}addEventListeners(){const e=document.getElementById("highlightOpacity");e&&e.addEventListener("input",e=>this.onOpacityChange(e));const t=document.getElementById("highlightColor");t&&t.addEventListener("change",e=>this.onColorChange(e));const n=document.getElementById("difficultyLevel");n&&n.addEventListener("change",e=>{this.settingsManager.setSetting("difficultyLevel",e.target.value);const t=document.getElementById("mainDifficultyLevel");t&&t.value!==e.target.value&&(t.value=e.target.value)});const i=document.getElementById("highlightMode");i&&i.addEventListener("change",e=>{this.settingsManager.setSetting("highlightMode",e.target.value);const t=document.getElementById("mainHighlightMode");t&&t.value!==e.target.value&&(t.value=e.target.value)});const s=document.getElementById("exportSettingsBtn");s&&s.addEventListener("click",()=>this.onExportSettings());const o=document.getElementById("importSettingsBtn");o&&o.addEventListener("click",()=>{const e=document.getElementById("importSettingsFile");e&&e.click()});const a=document.getElementById("importSettingsFile");a&&a.addEventListener("change",e=>this.onImportSettingsFileChange(e));const r=document.getElementById("enableGoogleDriveBtn");r&&r.addEventListener("click",()=>this.onEnableGoogleDrive());const l=document.getElementById("syncNowBtn");l&&l.addEventListener("click",()=>this.onSyncNow());const d=document.getElementById("disconnectGoogleDriveBtn");d&&d.addEventListener("click",()=>this.onDisconnectGoogleDrive())}renderContent(){return`\n            <div class="settings-section">\n                <h3>Highlighting</h3>\n                <div class="setting-item">\n                    <label for="highlightColor">Highlight Color:</label>\n                    <input type="color" id="highlightColor">\n                </div>\n                <div class="setting-item">\n                    <label for="highlightOpacity">Opacity:</label>\n                    <input type="range" id="highlightOpacity" min="0.1" max="1" step="0.1">\n                    <span id="opacityValue"></span>\n                </div>\n            </div>\n            <div class="settings-section">\n                <h3>Analysis</h3>\n                <div class="setting-item">\n                    <label for="difficultyLevel">Difficulty Level:</label>\n                    <select id="difficultyLevel">\n                        <option value="beginner">Beginner</option>\n                        <option value="intermediate">Intermediate</option>\n                        <option value="advanced">Advanced</option>\n                        <option value="expert">Expert</option>\n                    </select>\n                </div>\n                <div class="setting-item">\n                    <label for="highlightMode">Highlight Mode:</label>\n                    <select id="highlightMode">\n                        <option value="unknown">Unknown Words Only</option>\n                        <option value="difficult">Difficult Words</option>\n                        <option value="all">All Words</option>\n                    </select>\n                </div>\n            </div>\n            <div class="settings-section">\n                <h3>Google Drive Sync</h3>\n                \x3c!-- Google Drive UI will be rendered here --\x3e\n                <div id="google-drive-section">${this.renderGoogleDriveUI()}</div>\n            </div>\n            <div class="settings-section">\n                <h3>Data Management</h3>\n                <div class="setting-item">\n                    <button class="btn btn-primary" id="exportSettingsBtn"><i class="fas fa-download"></i> Export Settings</button>\n                    <button class="btn btn-secondary" id="importSettingsBtn"><i class="fas fa-upload"></i> Import Settings</button>\n                    <input type="file" id="importSettingsFile" accept=".json" style="display: none;">\n                </div>\n            </div>\n        `}renderGoogleDriveUI(){const e=this.googleDriveManager.getAuthStatus();return e.isInitialized?e.isSignedIn?`\n            <div class="google-drive-status">\n                <div class="user-info">\n                    ${this.userInfo&&this.userInfo.imageUrl?`<img src="${this.userInfo.imageUrl}" alt="User Avatar" class="user-avatar">`:'<div class="user-avatar-placeholder"><i class="fas fa-user"></i></div>'}\n                    <div class="user-details">\n                        <div class="user-name">${this.userInfo?.name||"Google User"}</div>\n                        <div class="user-email">${this.userInfo?.email||"No email provided"}</div>\n                    </div>\n                </div>\n                \n                <div class="sync-controls">\n                    <button class="btn btn-primary" id="syncNowBtn">\n                        <i class="fas fa-sync-alt"></i> Sync Now\n                    </button>\n                    <button class="btn btn-secondary" id="disconnectGoogleDriveBtn">\n                        <i class="fas fa-sign-out-alt"></i> Disconnect\n                    </button>\n                </div>\n                \n                ${this.lastSyncTime?`<div class="sync-info">\n                        <div class="last-sync">\n                            <i class="fas fa-check-circle"></i>\n                            <span>Last synced: ${new Date(this.lastSyncTime).toLocaleString()}</span>\n                        </div>\n                    </div>`:'<div class="sync-info">\n                        <div class="last-sync">\n                            <i class="fas fa-info-circle"></i>\n                            <span>Never synced</span>\n                        </div>\n                    </div>'}\n            </div>\n        `:'\n                <div class="google-drive-status">\n                    <div class="status-indicator">\n                        <i class="fas fa-unlink"></i>\n                        <span>Google Drive not connected</span>\n                    </div>\n                    <button class="btn btn-success" id="enableGoogleDriveBtn">\n                        <i class="fab fa-google"></i> Connect to Google Drive\n                    </button>\n                </div>\n            ':'\n                <div class="google-drive-status">\n                    <div class="status-indicator">\n                        <i class="fas fa-exclamation-circle"></i>\n                        <span>Google Drive not initialized</span>\n                    </div>\n                    <button class="btn btn-primary" id="enableGoogleDriveBtn">\n                        <i class="fab fa-google"></i> Initialize Google Drive\n                    </button>\n                </div>\n            '}async updateGoogleDriveStatus(){try{this.googleDriveManager.isSignedIn&&(this.userInfo=await this.googleDriveManager.getUserInfo());const e=document.getElementById("google-drive-section");e&&(e.innerHTML=this.renderGoogleDriveUI(),this.addEventListeners())}catch(e){console.error("Error updating Google Drive status:",e)}}loadSettingsToUI(){const e=this.settingsManager.getAllSettings();Object.entries(e).forEach(([e,t])=>{const n=document.getElementById(e);if(n)if("range"===n.type){n.value=t;const i=document.getElementById(e+"Value");i&&(i.textContent=Math.round(100*t)+"%")}else n.value=t});const t=document.getElementById("mainDifficultyLevel");t&&(t.value=e.difficultyLevel||"intermediate");const n=document.getElementById("mainHighlightMode");n&&(n.value=e.highlightMode||"unknown")}onOpacityChange(e){const t=parseFloat(e.target.value),n=document.getElementById("opacityValue");n&&(n.textContent=Math.round(100*t)+"%"),this.settingsManager.setSetting("highlightOpacity",t)}onColorChange(e){this.settingsManager.setSetting("highlightColor",e.target.value)}onExportSettings(){const e=this.settingsManager.exportSettings();this.app.downloadJSON(e,"settings.json"),this.app.showNotification("Settings exported successfully!")}onImportSettingsFileChange(e){const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target.result);this.settingsManager.importSettings(t)?(this.loadSettingsToUI(),this.app.showNotification("Settings imported successfully!")):this.app.showNotification("Error importing settings.","error")}catch(t){this.app.showNotification("Error importing settings.","error")}},n.readAsText(t)}async onEnableGoogleDrive(){try{const e=document.getElementById("enableGoogleDriveBtn");e&&(e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Connecting...',e.disabled=!0),this.googleDriveManager.isInitialized||await this.googleDriveManager.initialize();await this.googleDriveManager.signIn()?(this.app.showNotification("Successfully connected to Google Drive!"),await this.updateGoogleDriveStatus()):(this.app.showNotification("Failed to connect to Google Drive.","error"),e&&(e.innerHTML='<i class="fab fa-google"></i> Connect to Google Drive',e.disabled=!1))}catch(e){console.error("Error enabling Google Drive:",e),this.app.showNotification("Error connecting to Google Drive.","error");const t=document.getElementById("enableGoogleDriveBtn");t&&(t.innerHTML='<i class="fab fa-google"></i> Connect to Google Drive',t.disabled=!1)}}async onSyncNow(){try{const e=document.getElementById("syncNowBtn");if(e){const t=e.innerHTML;e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Syncing...',e.disabled=!0;try{const e=this.app.vocabularyManager.exportVocabulary(),t=await this.googleDriveManager.syncVocabulary(e);t.success?(this.lastSyncTime=new Date,this.app.showNotification("Successfully synced with Google Drive!"),await this.updateGoogleDriveStatus(),"download"!==t.action&&"merge"!==t.action||(this.app.vocabularyManager.importVocabulary(t.data),this.app.updateCounts(),this.app.showNotification("Vocabulary updated from Google Drive!"))):this.app.showNotification("Failed to sync with Google Drive: "+t.error,"error")}finally{e.innerHTML=t,e.disabled=!1}}}catch(e){console.error("Error syncing with Google Drive:",e),this.app.showNotification("Error syncing with Google Drive.","error");const t=document.getElementById("syncNowBtn");t&&(t.innerHTML='<i class="fas fa-sync-alt"></i> Sync Now',t.disabled=!1)}}async onDisconnectGoogleDrive(){try{await this.googleDriveManager.signOut()?(this.userInfo=null,this.lastSyncTime=null,this.app.showNotification("Disconnected from Google Drive."),await this.updateGoogleDriveStatus()):this.app.showNotification("Failed to disconnect from Google Drive.","error")}catch(e){console.error("Error disconnecting from Google Drive:",e),this.app.showNotification("Error disconnecting from Google Drive.","error")}}}class c extends a{constructor(e,t){super(e),this.vocabularyManager=t,this.app=null,this.currentWord=null,this.currentTranslation=null}setApp(e){this.app=e}render(e){this.element.innerHTML=e,this.addEventListeners()}addEventListeners(){this.element.addEventListener("click",e=>{if(e.target.classList.contains("word-span")){const t=e.target.dataset.word,n=e.target.dataset.translation;this.showWordModal(t,n,e)}})}showWordModal(e,t,n){this.currentWord=e,this.currentTranslation=t;const i=document.getElementById("wordModal");document.getElementById("wordModalContent");const s=document.getElementById("wordModalTitle"),o=document.getElementById("wordModalTranslation"),a=document.getElementById("wordModalActions");if(s.textContent=e,t.includes("<")&&t.includes(">")?o.innerHTML=t:o.textContent=t,a.innerHTML="",this.vocabularyManager.masteredWords.has(e)){const t=document.createElement("button");t.textContent="Move to Learning List",t.className="btn btn-secondary",t.onclick=()=>{this.handleWordUnmaster(e),this.closeWordModal()},a.appendChild(t)}else if(this.vocabularyManager.learningWords.has(e)){const n=document.createElement("button");n.textContent="Mark as Mastered",n.className="btn btn-primary",n.onclick=()=>{this.handleWordMaster(e,t),this.closeWordModal()},a.appendChild(n)}else{const n=document.createElement("button");n.textContent="Add to Learning List",n.className="btn btn-primary",n.onclick=()=>{this.handleWordAddToLearning(e,t),this.closeWordModal()},a.appendChild(n);const i=document.createElement("button");i.textContent="Add to Mastered List",i.className="btn btn-secondary",i.onclick=()=>{this.handleWordMaster(e,t),this.closeWordModal()},a.appendChild(i)}const r=document.createElement("button");r.textContent="Close",r.className="btn btn-outline",r.onclick=()=>this.closeWordModal(),a.appendChild(r),i.classList.add("show"),i.onclick=e=>{e.target===i&&this.closeWordModal()}}closeWordModal(){document.getElementById("wordModal").classList.remove("show")}handleWordAddToLearning(e,t){this.vocabularyManager.addWord(e,t)&&this.app.showNotification(`📖 '${e}' added to learning list.`),this.app.updateCounts(),this.refreshTextAnalysis()}handleWordMaster(e,t){const n=this.vocabularyManager.masterWord(e,t);"added_to_mastered"!==n&&"moved_to_mastered"!==n||this.app.showNotification(`✅ '${e}' marked as mastered.`),this.app.updateCounts(),this.refreshTextAnalysis()}handleWordUnmaster(e){"moved_to_learning"===this.vocabularyManager.unmasterWord(e)&&(this.app.showNotification(`📖 '${e}' moved to learning list.`),this.app.updateCounts()),this.refreshTextAnalysis()}refreshTextAnalysis(){const e=document.getElementById("textInput").value;if(!e)return;const t=this.app.performTextAnalysis(e),n=this.app.textAnalyzer.processTextForDisplay(e,t);this.render(n),this.app.updateStatistics&&this.app.updateStatistics(t)}}class g{constructor(){this.settingsManager=new o,this.wordDatabase=new t,this.vocabularyManager=new s,this.textAnalyzer=new n(this.wordDatabase),this.vocabularyComponent=new l(this.vocabularyManager),this.settingsComponent=new d(this.settingsManager,this.vocabularyManager.googleDriveManager),this.analyzedTextComponent=new c("#analyzedText",this.vocabularyManager),this.vocabularyComponent.setApp(this),this.settingsComponent.setApp(this),this.analyzedTextComponent.setApp(this),this.initialize()}async initialize(){this.addEventListeners(),this.updateCounts(),await this.wordDatabase.initialize(),console.log("WordDiscoverer initialized successfully")}addEventListeners(){document.getElementById("analyzeBtn").addEventListener("click",()=>this.analyzeText()),document.getElementById("vocabularyBtn").addEventListener("click",()=>this.vocabularyComponent.open()),document.getElementById("settingsBtn").addEventListener("click",()=>this.settingsComponent.open()),document.getElementById("clearBtn").addEventListener("click",()=>this.clearText());const e=document.getElementById("wordModalClose");e&&e.addEventListener("click",()=>{document.getElementById("wordModal").classList.remove("show")});const t=document.getElementById("mainDifficultyLevel");t&&t.addEventListener("change",e=>{this.settingsManager.setSetting("difficultyLevel",e.target.value),this.refreshTextAnalysis()});const n=document.getElementById("mainHighlightMode");n&&n.addEventListener("change",e=>{this.settingsManager.setSetting("highlightMode",e.target.value),this.refreshTextAnalysis()})}async analyzeText(){const e=document.getElementById("textInput").value.trim();if(!e)return void this.showNotification("Please enter some text to analyze.","error");const t=document.getElementById("loadingOverlay");t.classList.add("show");try{const t=this.performTextAnalysis(e),n=this.textAnalyzer.processTextForDisplay(e,t);this.analyzedTextComponent.render(n),document.getElementById("analyzedTextSection").style.display="block",document.getElementById("statistics").style.display="flex",document.getElementById("highlightedWordsList").style.display="block",this.updateStatistics(t),this.displayHighlightedWords(t.highlightedWords)}catch(n){console.error("Analysis error:",n),this.showNotification("Error analyzing text. Please try again.","error")}finally{t.classList.remove("show")}}performTextAnalysis(e){const t=this.textAnalyzer.extractWords(e);return this.textAnalyzer.analyzeWords(t,this.settingsManager.getSetting("difficultyLevel"),this.settingsManager.getSetting("highlightMode"),{learning:this.vocabularyManager.learningWords,mastered:this.vocabularyManager.masteredWords})}refreshTextAnalysis(){if("block"!==document.getElementById("analyzedTextSection").style.display)return;const e=document.getElementById("textInput").value.trim();if(!e)return;const t=this.performTextAnalysis(e),n=this.textAnalyzer.processTextForDisplay(e,t);this.analyzedTextComponent.render(n),this.updateStatistics(t),this.displayHighlightedWords(t.highlightedWords)}updateStatistics(e){document.getElementById("totalWords").textContent=e.totalWords,document.getElementById("highlightedWords").textContent=e.highlightedWords.length,document.getElementById("newWords").textContent=e.newWords.length,document.getElementById("difficultyScore").textContent=e.difficultyScore}displayHighlightedWords(e){const t=document.getElementById("highlightedWordsContainer");t.innerHTML="",0!==e.length?e.forEach(e=>{const n=document.createElement("div");n.className="highlighted-word-item";const i=document.createElement("div");i.innerHTML=e.translation;let s="",o="";const a=i.querySelector(".pron");a&&(s=a.textContent.trim());const r=i.querySelector(".trans");r&&(o=r.textContent.trim()),a||r||(o=e.translation),n.innerHTML=`\n                <div class="word">${e.word}</div>\n                ${s?`<div class="pronunciation">/${s}/</div>`:""}\n                <div class="translation">${o}</div>\n            `,t.appendChild(n)}):t.innerHTML="<p>No highlighted words found.</p>"}updateCounts(){this.vocabularyComponent.updateCounts()}showNotification(e,t="success"){const n=document.createElement("div"),i={success:"#10b981",error:"#ef4444",info:"#3b82f6"};n.style.cssText=`\n            position: fixed; top: 20px; right: 20px; background: ${i[t]||i.success}; color: white;\n            padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            z-index: 3000; animation: slideIn 0.3s ease; max-width: 300px; word-wrap: break-word;\n        `,n.textContent=e,document.body.appendChild(n),setTimeout(()=>n.remove(),3e3)}downloadJSON(e,t){const n=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),i=URL.createObjectURL(n),s=document.createElement("a");s.href=i,s.download=t,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(i)}clearText(){document.getElementById("textInput").value="",document.getElementById("analyzedTextSection").style.display="none",document.getElementById("statistics").style.display="none",document.getElementById("highlightedWordsList").style.display="none",document.getElementById("analyzedText").innerHTML="",document.getElementById("totalWords").textContent="0",document.getElementById("highlightedWords").textContent="0",document.getElementById("newWords").textContent="0",document.getElementById("difficultyScore").textContent="0",document.getElementById("highlightedWordsContainer").innerHTML=""}}document.addEventListener("DOMContentLoaded",()=>{window.wordDiscoverer=new g});
