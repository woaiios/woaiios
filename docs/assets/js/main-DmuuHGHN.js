!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const e={};class t{constructor(e){this.SQL=e,this.db=null,this.metadata=null,this.loadedChunks=new Set,this.loadingProgress=0,this.totalBytes=0,this.loadedBytes=0,this.isInitialized=!1,this.listeners={progress:[],chunkLoaded:[],complete:[],error:[]},this.dbName="WordDiscovererCache",this.dbVersion=1,this.cacheDB=null}async initializeCache(){return new Promise((e,t)=>{const n=indexedDB.open(this.dbName,this.dbVersion);n.onerror=()=>{console.warn("Failed to open IndexedDB, continuing without cache"),e(null)},n.onsuccess=t=>{this.cacheDB=t.target.result,console.log("✅ IndexedDB cache initialized"),e(this.cacheDB)},n.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains("chunks")||t.createObjectStore("chunks",{keyPath:"chunkNumber"}),t.objectStoreNames.contains("metadata")||t.createObjectStore("metadata",{keyPath:"key"})}})}async saveChunkToCache(e,t){if(this.cacheDB)return new Promise((n,s)=>{const o=this.cacheDB.transaction(["chunks"],"readwrite").objectStore("chunks").put({chunkNumber:e,data:t,timestamp:Date.now()});o.onsuccess=()=>n(),o.onerror=()=>{console.warn(`Failed to cache chunk ${e}`),n()}})}async loadChunkFromCache(e){return this.cacheDB?new Promise((t,n)=>{const s=this.cacheDB.transaction(["chunks"],"readonly").objectStore("chunks").get(e);s.onsuccess=n=>{const s=n.target.result;s&&s.data?(console.log(`✅ Loaded chunk ${e} from cache`),t(s.data)):t(null)},s.onerror=()=>t(null)}):null}async saveMetadataToCache(e){if(this.cacheDB)return new Promise((t,n)=>{const s=this.cacheDB.transaction(["metadata"],"readwrite").objectStore("metadata").put({key:"metadata",data:e,timestamp:Date.now()});s.onsuccess=()=>t(),s.onerror=()=>t()})}async loadMetadataFromCache(){return this.cacheDB?new Promise((e,t)=>{const n=this.cacheDB.transaction(["metadata"],"readonly").objectStore("metadata").get("metadata");n.onsuccess=t=>{const n=t.target.result;n&&n.data?(console.log("✅ Loaded metadata from cache"),e(n.data)):e(null)},n.onerror=()=>e(null)}):null}async isChunkCached(e){return null!==await this.loadChunkFromCache(e)}async initialize(){try{console.log("🚀 Initializing Progressive Database Loader..."),await this.initializeCache();let e=await this.loadMetadataFromCache();if(!e){const t="/db-chunks/metadata.json";console.log("📥 Fetching metadata...");const n=await fetch(t);if(!n.ok)throw new Error(`Failed to load metadata: ${n.status}`);e=await n.json(),await this.saveMetadataToCache(e)}return this.metadata=e,this.totalBytes=e.chunks.reduce((e,t)=>e+t.sizeBytes,0),console.log(`📊 Metadata loaded: ${e.totalChunks} chunks, ${e.totalWords.toLocaleString()} words`),this.db=new this.SQL.Database,this.db.exec("\n                CREATE TABLE words (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    word TEXT NOT NULL,\n                    phonetic TEXT,\n                    definition TEXT,\n                    translation TEXT,\n                    pos TEXT,\n                    collins INTEGER DEFAULT 0,\n                    oxford INTEGER DEFAULT 0,\n                    tag TEXT,\n                    bnc INTEGER DEFAULT 0,\n                    frq INTEGER DEFAULT 0,\n                    exchange TEXT,\n                    detail TEXT,\n                    audio TEXT\n                );\n                CREATE INDEX idx_word ON words(word);\n            "),this.isInitialized=!0,this.emit("progress",{loaded:0,total:this.totalBytes,percentage:0,message:"Initialized"}),!0}catch(e){return console.error("Error initializing progressive loader:",e),this.emit("error",e),!1}}async loadChunk(e){if(!this.isInitialized)throw new Error("Loader not initialized");if(this.loadedChunks.has(e))return console.log(`⚠️ Chunk ${e} already loaded`),!0;try{const t=this.metadata.chunks.find(t=>t.chunkNumber===e);if(!t)throw new Error(`Chunk ${e} not found in metadata`);console.log(`📥 Loading chunk ${e}/${this.metadata.totalChunks} (${t.wordCount.toLocaleString()} words)...`);let n=await this.loadChunkFromCache(e);if(!n){const s=`/db-chunks/${t.filename}`,o=await fetch(s);if(!o.ok)throw new Error(`Failed to load chunk ${e}: ${o.status}`);const i=await o.arrayBuffer(),a=new Blob([i]).stream().pipeThrough(new DecompressionStream("gzip")),r=await new Response(a).blob();n=await r.arrayBuffer(),await this.saveChunkToCache(e,n)}const s=new this.SQL.Database(new Uint8Array(n)),o=s.exec("SELECT word, phonetic, definition, translation, pos, collins, oxford, tag, bnc, frq, exchange, detail, audio FROM words");if(o.length>0&&o[0].values.length>0){const e=this.db.prepare("\n                    INSERT INTO words (word, phonetic, definition, translation, pos, collins, oxford, tag, bnc, frq, exchange, detail, audio)\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                ");for(const t of o[0].values)e.run(t);e.free()}return s.close(),this.loadedChunks.add(e),this.loadedBytes+=t.sizeBytes,this.loadingProgress=this.loadedBytes/this.totalBytes*100,console.log(`✅ Chunk ${e} loaded (${this.loadingProgress.toFixed(1)}% complete)`),this.emit("chunkLoaded",{chunkNumber:e,loaded:this.loadedChunks.size,total:this.metadata.totalChunks,percentage:this.loadingProgress}),this.emit("progress",{loaded:this.loadedBytes,total:this.totalBytes,percentage:this.loadingProgress,message:`Loaded chunk ${e}/${this.metadata.totalChunks}`}),!0}catch(t){return console.error(`Error loading chunk ${e}:`,t),this.emit("error",t),!1}}async loadAllChunks(){this.isInitialized||await this.initialize(),console.log("📚 Starting progressive database loading...");for(let e=1;e<=this.metadata.totalChunks;e++)await this.loadChunk(e);return console.log("✨ All chunks loaded successfully!"),this.emit("complete",{totalChunks:this.metadata.totalChunks,totalWords:this.metadata.totalWords}),!0}async loadPriorityChunks(e=3){this.isInitialized||await this.initialize(),console.log(`📚 Loading ${e} priority chunks...`);for(let t=1;t<=Math.min(e,this.metadata.totalChunks);t++)await this.loadChunk(t);return e<this.metadata.totalChunks&&this.loadRemainingChunksInBackground(e+1),!0}async loadRemainingChunksInBackground(e){console.log(`🔄 Loading remaining chunks in background starting from ${e}...`);for(let t=e;t<=this.metadata.totalChunks;t++)await this.loadChunk(t),await new Promise(e=>setTimeout(e,100));console.log("✨ All chunks loaded successfully!"),this.emit("complete",{totalChunks:this.metadata.totalChunks,totalWords:this.metadata.totalWords})}getDatabase(){return this.db}isReady(){return this.isInitialized&&this.loadedChunks.size>0}getProgress(){return{percentage:this.loadingProgress,loadedChunks:this.loadedChunks.size,totalChunks:this.metadata?this.metadata.totalChunks:0,loadedBytes:this.loadedBytes,totalBytes:this.totalBytes}}on(e,t){this.listeners[e]&&this.listeners[e].push(t)}emit(e,t){this.listeners[e]&&this.listeners[e].forEach(e=>e(t))}close(){this.db&&(this.db.close(),this.db=null),this.cacheDB&&(this.cacheDB.close(),this.cacheDB=null)}}class n{constructor(){this.db=null,this.isLoaded=!1,this.queryCache=new Map,this.SQL=null,this.progressiveLoader=null,this.progressCallback=null}setProgressCallback(e){this.progressCallback=e}async initialize(){try{console.log("Initializing sql.js...");const n=(await function(t,n){let s=Promise.resolve();if(n&&n.length>0){let t=function(e){return Promise.all(e.map(e=>Promise.resolve(e).then(e=>({status:"fulfilled",value:e}),e=>({status:"rejected",reason:e}))))};document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),i=o?.nonce||o?.getAttribute("nonce");s=t(n.map(t=>{if((t=function(e){return"/"+e}(t))in e)return;e[t]=!0;const n=t.endsWith(".css"),s=n?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${s}`))return;const o=document.createElement("link");return o.rel=n?"stylesheet":"modulepreload",n||(o.as="script"),o.crossOrigin="",o.href=t,i&&o.setAttribute("nonce",i),document.head.appendChild(o),n?new Promise((e,n)=>{o.addEventListener("load",e),o.addEventListener("error",()=>n(new Error(`Unable to preload CSS for ${t}`)))}):void 0}))}function o(e){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e}return s.then(e=>{for(const t of e||[])"rejected"===t.status&&o(t.reason);return t().catch(o)})}(async()=>{const{default:e}=await import("./sql-wasm-BKnWKaoM.js").then(e=>e.s);return{default:e}},[])).default;this.SQL=await n({locateFile:e=>`/assets/${e}`}),console.log("🚀 Using progressive database loading..."),this.progressiveLoader=new t(this.SQL),this.progressiveLoader.on("progress",e=>{this.progressCallback&&this.progressCallback(e)}),this.progressiveLoader.on("chunkLoaded",e=>{console.log(`✅ Chunk ${e.chunkNumber} loaded (${e.percentage.toFixed(1)}% complete)`)}),this.progressiveLoader.on("complete",e=>{console.log(`✨ All database chunks loaded! Total: ${e.totalWords.toLocaleString()} words`)}),this.progressiveLoader.on("error",e=>{console.error("Progressive loader error:",e)}),await this.progressiveLoader.initialize(),await this.progressiveLoader.loadPriorityChunks(3),this.db=this.progressiveLoader.getDatabase();const s=this.db.exec("SELECT COUNT(*) as count FROM words LIMIT 1");if(s.length>0){const e=s[0].values[0][0];console.log(`ECDICT database ready with ${e.toLocaleString()} words (loading more in background...)`)}return this.isLoaded=!0,!0}catch(n){return console.error("Error loading ECDICT database:",n),this.isLoaded=!1,!1}}queryWord(e){if(!this.isLoaded||!this.db)return null;const t=e.toLowerCase();if(this.queryCache.has(t))return this.queryCache.get(t);try{const e=this.db.exec("SELECT word, phonetic, definition, translation, pos, collins, oxford, tag, bnc, frq, exchange, detail \n                 FROM words \n                 WHERE LOWER(word) = ? \n                 LIMIT 1",[t]);if(e.length>0&&e[0].values.length>0){const n=e[0].values[0],s={word:n[0],phonetic:n[1]||"",definition:n[2]||"",translation:n[3]||"",pos:n[4]||"",collins:parseInt(n[5])||0,oxford:"1"===n[6]||1===n[6],tag:n[7]||"",bnc:parseInt(n[8])||0,frq:parseInt(n[9])||0,exchange:n[10]||"",detail:n[11]||""};if(this.queryCache.set(t,s),this.queryCache.size>1e4){const e=this.queryCache.keys().next().value;this.queryCache.delete(e)}return s}return null}catch(n){return console.error("Error querying word:",e,n),null}}parseExchange(e){const t={p:null,d:null,i:null,3:null,r:null,t:null,s:null,0:null,1:null};if(!e)return t;const n=e.split("/");for(const s of n){const[e,n]=s.split(":");e&&n&&(t[e]=n)}return t}getWordDifficulty(e){const t=this.queryWord(e);if(!t)return{level:"common",score:0,className:"common",info:null};let n="expert",s=100;const o=t.tag||"";return 1===t.oxford?(n="common",s=0):t.collins>=5?(n="common",s=10):t.collins>=4||o.includes("zk")||o.includes("gk")||o.includes("cet4")?(n="beginner",s=25):t.collins>=3||o.includes("cet6")?(n="intermediate",s=50):t.collins>=1||o.includes("ielts")||o.includes("toefl")?(n="advanced",s=75):t.bnc>0&&t.bnc<2e4?(n="common",s=15):t.bnc>0&&t.bnc<5e4?(n="beginner",s=30):t.bnc>0&&t.bnc<1e5&&(n="intermediate",s=55),{level:n,score:s,className:n,info:t}}findByLemma(e){if(!this.isLoaded||!this.db)return null;try{const t=this.db.exec("SELECT word, exchange \n                 FROM words \n                 WHERE exchange LIKE ? \n                 LIMIT 10",[`%${e}%`]);if(t.length>0&&t[0].values.length>0)for(const n of t[0].values){const t=n[0],s=n[1],o=this.parseExchange(s);for(const n of Object.values(o))if(n&&n.toLowerCase()===e.toLowerCase())return this.queryWord(t)}return null}catch(t){return console.error("Error finding lemma:",t),null}}fuzzyMatch(e,t=10){if(!this.isLoaded||!this.db)return[];try{const n=e.toLowerCase(),s=this.db.exec("SELECT word, phonetic, translation \n                 FROM words \n                 WHERE LOWER(word) LIKE ? \n                 LIMIT ?",[`${n}%`,t]);return s.length>0&&s[0].values.length>0?s[0].values.map(e=>({word:e[0],phonetic:e[1]||"",translation:e[2]||""})):[]}catch(n){return console.error("Error fuzzy matching:",n),[]}}isDatabaseLoaded(){return this.isLoaded}close(){this.db&&(this.db.close(),this.db=null,this.isLoaded=!1)}}class s{constructor(e,t){this.wordDatabase=e,this.translationService=t,this.tokenizer=null,this.loadTokenizer()}async loadTokenizer(){try{if(!Intl.Segmenter)throw new Error("Intl.Segmenter not supported in this browser");this.tokenizer=new Intl.Segmenter(void 0,{granularity:"word"}),console.log("Intl.Segmenter loaded successfully")}catch(e){console.warn("Error loading Intl.Segmenter, falling back to simple extraction:",e),this.tokenizer={tokenize:e=>e.split(/\s+/).map(e=>({value:e,tag:"word"}))}}}extractWords(e){if(this.tokenizer&&this.tokenizer.segment){const t=this.tokenizer.segment(e);return Array.from(t).filter(e=>e.isWordLike).map(e=>e.segment).filter(e=>e.length>1).filter(e=>/^[a-zA-Z]+$/.test(e))}return e.split(/\s+/).filter(e=>e.length>1).filter(e=>/^[a-zA-Z]+$/.test(e))}analyzeWords(e,t,n,s){const o={totalWords:e.length,highlightedWords:[],newWords:[],difficultyScore:0,wordFrequency:{}},{learning:i,mastered:a}=s;e.forEach(e=>{const t=e.toLowerCase();o.wordFrequency[t]=(o.wordFrequency[t]||0)+1});const r=[...new Set(e.map(e=>e.toLowerCase()))];return r.forEach(s=>{const r=e.find(e=>e.toLowerCase()===s)||s,l=this.wordDatabase.getWordDifficulty(s),d=a.has(s),c=i.has(s);!d&&(c||this.shouldHighlight(s,l,n,i,t))&&(o.highlightedWords.push({word:r,difficulty:l,frequency:o.wordFrequency[s],translation:this.getTranslation(r)}),i.has(s)||o.newWords.push(s)),o.difficultyScore+=l.score}),o.difficultyScore=r.length>0?Math.round(o.difficultyScore/r.length):0,o}shouldHighlight(e,t,n,s,o){const i={common:0,beginner:1,intermediate:2,advanced:3,expert:4,unknown:5},a=i[t.level]>i[o];switch(n){case"unknown":return a&&!s.has(e);case"difficult":return a;case"all":return!0;default:return!1}}getTranslation(e){if(!this.wordDatabase.isDatabaseLoaded())return'<div class="word-info"><p>数据库未加载</p></div>';const t=e.toLowerCase();let n=this.wordDatabase.queryWord(t);if(n||(n=this.wordDatabase.findByLemma(t)),!n)return`<div class="word-info">\n                <h3>${e}</h3>\n                <p class="no-translation">未找到释义</p>\n            </div>`;let s='<div class="word-info ecdict-entry">';if(s+=`<h3>${n.word}`,n.phonetic&&(s+=` <span class="phonetic">/${n.phonetic}/</span>`),s+="</h3>",(n.collins>0||n.oxford)&&(s+='<div class="word-meta">',n.collins>0&&(s+=`<span class="collins-stars">${"★".repeat(n.collins)}</span>`),n.oxford&&(s+='<span class="oxford-badge">Oxford 3000</span>'),s+="</div>"),n.tag){const e=n.tag.split(" ").filter(e=>e);if(e.length>0){s+='<div class="word-tags">';const t={zk:"中考",gk:"高考",cet4:"CET-4",cet6:"CET-6",ielts:"IELTS",toefl:"TOEFL",gre:"GRE",tem4:"TEM-4",tem8:"TEM-8"};e.forEach(e=>{const n=t[e]||e;s+=`<span class="tag">${n}</span>`}),s+="</div>"}}if(n.translation){s+='<div class="translation">';n.translation.split("\\n").forEach(e=>{e.trim()&&(s+=`<p>${this.escapeHtml(e)}</p>`)}),s+="</div>"}if(n.definition){s+='<div class="definition">',s+="<h4>Definition:</h4>";n.definition.split("\\n").forEach(e=>{e.trim()&&(s+=`<p>${this.escapeHtml(e)}</p>`)}),s+="</div>"}if(n.exchange){const e=this.wordDatabase.parseExchange(n.exchange),t={p:"过去式",d:"过去分词",i:"现在分词",3:"第三人称单数",r:"比较级",t:"最高级",s:"复数",0:"原形"},o=[];for(const[n,s]of Object.entries(e))s&&t[n]&&o.push(`${t[n]}: ${s}`);o.length>0&&(s+='<div class="word-forms">',s+="<h4>词形变化:</h4>",s+=`<p>${o.join(" | ")}</p>`,s+="</div>")}return(n.bnc>0||n.frq>0)&&(s+='<div class="word-frequency">',n.bnc>0&&(s+=`<span>BNC词频: ${n.bnc.toLocaleString()}</span>`),n.frq>0&&(s+=`<span>当代词频: ${n.frq.toLocaleString()}</span>`),s+="</div>"),s+="</div>",s}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}processTextForDisplay(e,t){const n=new Map(t.highlightedWords.map(e=>[e.word.toLowerCase(),e]));return e.split(/(\b[a-zA-Z-]+\b)/).map(e=>{const t=e.toLowerCase();if(!/\b[a-zA-Z-]+\b/.test(t))return e;const s=n.get(t),o=this.getTranslation(e);let i="word-span";s&&(i+=` highlighted-word ${s.difficulty.className}`);return`<span class="${i}" data-word="${e}" data-translation="${o.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}">${e}</span>`}).join("")}calculateComplexityMetrics(e,t){const n=[...new Set(e)],s={totalWords:e.length,uniqueWords:n.length,averageWordLength:0,difficultyDistribution:{common:0,beginner:0,intermediate:0,advanced:0,expert:0}},o=e.reduce((e,t)=>e+t.length,0);return s.averageWordLength=Math.round(o/e.length*10)/10,n.forEach(e=>{const n=this.wordDatabase.getWordDifficulty(e,t);s.difficultyDistribution[n.level]++}),s}}class o{constructor(){this.clientId="781460731280-7moak9c5fq75dubjlnmes4b4gdku3qvt.apps.googleusercontent.com",this.scopes="https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email",this.isInitialized=!1,this.isSignedIn=!1,this.accessToken=null,this.fileId=null,this.gapiLoaded=!1}async initialize(){try{return await this._waitForGoogleIdentityServices(),await this._loadGoogleAPIClient(),this.isInitialized=!0,console.log("Google Drive API initialized successfully"),!0}catch(e){return console.error("Error initializing Google Drive API:",e),!1}}async signIn(e=!1){try{this.isInitialized||await this.initialize();const t=await this._getToken(e);return this.accessToken=t.access_token,this.isSignedIn=!0,await this._initializeGoogleAPIClient(),await this.findOrCreateVocabularyFile(),console.log("Successfully signed in to Google"),!0}catch(t){return console.error("Error signing in:",t),this.isSignedIn=!1,!1}}async signOut(){try{return this.accessToken&&window.google.accounts.oauth2.revoke(this.accessToken),this.isSignedIn=!1,this.accessToken=null,this.fileId=null,console.log("Successfully signed out from Google"),!0}catch(e){return console.error("Error signing out:",e),!1}}async findOrCreateVocabularyFile(){try{let e=await this._findFileInSpace("drive");return e?(this.fileId=e.id,console.log("Found existing vocabulary file in drive:",this.fileId),this.fileId):(e=await this._findFileInSpace("appDataFolder"),e?(this.fileId=e.id,console.warn("Found vocabulary file in hidden appDataFolder."),this.fileId):(this.fileId=await this._createFile(),console.log("Created new vocabulary file in root directory:",this.fileId),this.fileId))}catch(e){return console.error("Error finding/creating vocabulary file:",e),null}}async uploadVocabulary(e){try{if(!this.isSignedIn||!this.fileId)throw new Error("Not signed in or file not found");const t=JSON.stringify(e,null,2);return await gapi.client.request({path:`/upload/drive/v3/files/${this.fileId}`,method:"PATCH",params:{uploadType:"media"},headers:{"Content-Type":"application/json"},body:t}),console.log("Vocabulary uploaded successfully to Google Drive"),!0}catch(t){return console.error("Error uploading vocabulary:",t),403===t.status&&(console.log("Attempting to refresh access token..."),await this.refreshAccessToken(),this.uploadVocabulary(e))}}async downloadVocabulary(){if(!this.isSignedIn||!this.fileId)throw new Error("Not signed in or file not found");try{const e=await gapi.client.drive.files.get({fileId:this.fileId,alt:"media"});return e.body?(console.log("Vocabulary downloaded successfully from Google Drive"),JSON.parse(e.body)):null}catch(e){return console.error("Error downloading vocabulary:",e),null}}async syncVocabulary(e){if(!this.isSignedIn)return{success:!1,error:"Not signed in to Google"};try{const t=await this.downloadVocabulary();if(!t||!t.version){console.log("No remote data or old format found. Uploading local data.");return{success:await this.uploadVocabulary(e),action:"upload",data:e}}const n=this._mergeVocabularies(e,t);return await this.uploadVocabulary(n)?{success:!0,action:"merge",data:n}:{success:!1,action:"merge_fail",data:e,error:"Failed to upload merged vocabulary"}}catch(t){return console.error("Error syncing vocabulary:",t),{success:!1,error:t.message}}}getAuthStatus(){return{isInitialized:this.isInitialized,isSignedIn:this.isSignedIn,hasFile:!!this.fileId}}async getUserInfo(){if(!this.isSignedIn)return null;try{const e=(await gapi.client.people.people.get({resourceName:"people/me",personFields:"names,emailAddresses,photos"})).result;return{name:e.names&&e.names[0]?e.names[0].displayName:"Google User",email:e.emailAddresses&&e.emailAddresses[0]?e.emailAddresses[0].value:"",imageUrl:e.photos&&e.photos[0]?e.photos[0].url:null}}catch(e){return console.error("Error getting user info:",e),null}}_getToken(e=!1){return new Promise((t,n)=>{window.google.accounts.oauth2.initTokenClient({client_id:this.clientId,scope:this.scopes,callback:e=>e.error?n(new Error(e.error_description)):t(e)}).requestAccessToken({prompt:e?"none":""})})}async refreshAccessToken(){try{const e=await this._getToken(!0);return this.accessToken=e.access_token,gapi.client.setToken({access_token:this.accessToken}),console.log("Access token refreshed successfully"),!0}catch(e){return console.error("Token refresh error:",e),this.isSignedIn=!1,!1}}_waitForGoogleIdentityServices(){return new Promise((e,t)=>{if(window.google&&window.google.accounts)return e();const n=setTimeout(()=>t(new Error("Google Identity Services failed to load")),1e4),s=setInterval(()=>{window.google&&window.google.accounts&&(clearTimeout(n),clearInterval(s),e())},100)})}_loadGoogleAPIClient(){return new Promise((e,t)=>{if(window.gapi&&window.gapi.client)return e();const n=document.createElement("script");n.src="https://apis.google.com/js/api.js",n.onload=()=>gapi.load("client",e),n.onerror=t,document.head.appendChild(n)})}async _initializeGoogleAPIClient(){await gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest","https://people.googleapis.com/$discovery/rest?version=v1"]}),gapi.client.setToken({access_token:this.accessToken})}async _findFileInSpace(e){const t=await gapi.client.drive.files.list({q:"name='WordDiscoverer_Vocabulary.json' and trashed=false",spaces:e,fields:"files(id, name)"});return t.result.files&&t.result.files.length>0?t.result.files[0]:null}async _createFile(){return(await gapi.client.drive.files.create({resource:{name:"WordDiscoverer_Vocabulary.json",parents:["root"]},fields:"id"})).result.id}_mergeVocabularies(e,t){console.log("Performing two-way merge for vocabulary v2.0");const n=new Map(e.learningWords||[]),s=new Map(e.masteredWords||[]),o=new Map(t.learningWords||t.vocabulary||[]),i=new Map(t.masteredWords||[]),a=new Map([...o,...n]),r=new Map([...i,...s]);for(const l of s.keys())a.has(l)&&a.delete(l);for(const l of n.keys())r.has(l)&&r.delete(l);return{version:"2.0",exportDate:(new Date).toISOString(),learningWords:Array.from(a.entries()),masteredWords:Array.from(r.entries())}}}class i{constructor(){const{learningWords:e,masteredWords:t}=this.loadVocabulary();this.learningWords=e,this.masteredWords=t,this.googleDriveManager=new o,this.syncEnabled=!1,this.lastSyncTime=null,this.isSyncing=!1}addWord(e,t){return!this.isKnownWord(e)&&(this.learningWords.set(e,{translation:t,addedDate:(new Date).toISOString(),reviewCount:0,lastReviewed:null}),this.saveVocabulary(),!0)}masterWord(e,t){const n=e.toLowerCase();if(this.masteredWords.has(n))return"already_mastered";let s;return this.learningWords.has(n)?(s=this.learningWords.get(n),this.learningWords.delete(n),this.masteredWords.set(n,s),this.saveVocabulary(),"moved_to_mastered"):(s={translation:t,addedDate:(new Date).toISOString(),reviewCount:0,lastReviewed:null},this.masteredWords.set(n,s),this.saveVocabulary(),"added_to_mastered")}unmasterWord(e){const t=e.toLowerCase();if(this.masteredWords.has(t)){const e=this.masteredWords.get(t);return this.masteredWords.delete(t),this.learningWords.set(t,e),this.saveVocabulary(),"moved_to_learning"}return!1}removeWord(e){return this.learningWords.has(e)?(this.learningWords.delete(e),this.saveVocabulary(),!0):!!this.masteredWords.has(e)&&(this.masteredWords.delete(e),this.saveVocabulary(),!0)}isKnownWord(e){return this.learningWords.has(e)||this.masteredWords.has(e)}isMasteredWord(e){return this.masteredWords.has(e)}getWordData(e){return this.learningWords.get(e)||this.masteredWords.get(e)||null}getLearningWords(){return Array.from(this.learningWords.entries())}getMasteredWords(){return Array.from(this.masteredWords.entries())}getLearningSize(){return this.learningWords.size}getTotalSize(){return this.learningWords.size+this.masteredWords.size}clearVocabulary(){return this.learningWords.clear(),this.masteredWords.clear(),this.saveVocabulary(),!0}getSortedByDate(e){return Array.from(e.entries()).sort((e,t)=>new Date(t[1].addedDate)-new Date(e[1].addedDate))}updateReviewCount(e){const t=this.learningWords.get(e);return!!t&&(t.reviewCount++,t.lastReviewed=(new Date).toISOString(),this.saveVocabulary(),!0)}exportVocabulary(){return{version:"2.0",exportDate:(new Date).toISOString(),learningWords:Array.from(this.learningWords.entries()),masteredWords:Array.from(this.masteredWords.entries())}}importVocabulary(e){try{if("2.0"===e.version&&e.learningWords)this.learningWords=new Map(e.learningWords||[]),this.masteredWords=new Map(e.masteredWords||[]);else{if(!e.vocabulary||!Array.isArray(e.vocabulary))return!1;this.learningWords=new Map(e.vocabulary),this.masteredWords=new Map}return this.saveVocabulary(),!0}catch(t){return console.error("Error importing vocabulary:",t),!1}}getStatistics(){const e=[...Array.from(this.learningWords.values()),...Array.from(this.masteredWords.values())].reduce((e,t)=>e+t.reviewCount,0);return{learningWords:this.learningWords.size,masteredWords:this.masteredWords.size,totalWords:this.getTotalSize(),totalReviews:e}}loadVocabulary(){const e=localStorage.getItem("wordDiscovererVocabulary");if(!e)return{learningWords:new Map,masteredWords:new Map};try{const t=JSON.parse(e);if("2.0"===t.version)return{learningWords:new Map(t.learningWords||[]),masteredWords:new Map(t.masteredWords||[])};if(Array.isArray(t))return console.log("Migrating old vocabulary format to new v2.0 format."),{learningWords:new Map(t),masteredWords:new Map}}catch(t){console.error("Error loading vocabulary:",t)}return{learningWords:new Map,masteredWords:new Map}}saveVocabulary(){const e={version:"2.0",learningWords:Array.from(this.learningWords.entries()),masteredWords:Array.from(this.masteredWords.entries())};localStorage.setItem("wordDiscovererVocabulary",JSON.stringify(e)),this.syncEnabled&&!this.isSyncing&&this.syncToGoogleDrive()}async initializeGoogleDrive(){try{const e=await this.googleDriveManager.initialize();return e&&console.log("Google Drive integration initialized"),e}catch(e){return console.error("Error initializing Google Drive:",e),!1}}async enableGoogleDriveSync(e=!1){try{this.googleDriveManager.isInitialized||await this.initializeGoogleDrive();return!!(await this.googleDriveManager.signIn(e))&&(this.syncEnabled=!0,await this.syncToGoogleDrive(),console.log("Google Drive sync enabled"),!0)}catch(t){return console.error("Error enabling Google Drive sync:",t),!1}}async disableGoogleDriveSync(){try{return this.syncEnabled=!1,await this.googleDriveManager.signOut(),console.log("Google Drive sync disabled"),!0}catch(e){return console.error("Error disabling Google Drive sync:",e),!1}}async syncToGoogleDrive(){if(!this.syncEnabled||!this.googleDriveManager.isSignedIn||this.isSyncing)return!1;this.isSyncing=!0;try{const e=this.exportVocabulary(),t=await this.googleDriveManager.syncVocabulary(e);return t.success?("merge"===t.action?(this.importVocabulary(t.data),console.log("Vocabulary merged and synced with Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis()):"download"===t.action?(this.importVocabulary(t.data),console.log("Vocabulary synced from Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis()):"upload"===t.action&&console.log("Vocabulary uploaded to Google Drive"),this.lastSyncTime=(new Date).toISOString(),!0):(console.error("Sync failed:",t.error),!1)}catch(e){return console.error("Error syncing to Google Drive:",e),!1}finally{this.isSyncing=!1}}async forceSyncFromGoogleDrive(){try{if(!this.googleDriveManager.isSignedIn)return!1;const e=await this.googleDriveManager.downloadVocabulary();return!!e&&(this.importVocabulary(e),this.lastSyncTime=(new Date).toISOString(),console.log("Vocabulary force synced from Google Drive"),window.wordDiscoverer&&window.wordDiscoverer.refreshTextAnalysis(),!0)}catch(e){return console.error("Error force syncing from Google Drive:",e),!1}}async getGoogleDriveStatus(){const e=this.googleDriveManager.getAuthStatus(),t=await this.googleDriveManager.getUserInfo();return{syncEnabled:this.syncEnabled,isSignedIn:e.isSignedIn,hasFile:e.hasFile,lastSyncTime:this.lastSyncTime,userInfo:t}}getGoogleDriveManager(){return this.googleDriveManager}}class a{constructor(){this.settings=this.loadSettings()}getSetting(e){return this.settings[e]}setSetting(e,t){this.settings[e]=t,this.saveSettings()}getAllSettings(){return{...this.settings}}updateSettings(e){this.settings={...this.settings,...e},this.saveSettings()}resetToDefault(){this.settings=this.getDefaultSettings(),this.saveSettings()}exportSettings(){return{settings:this.settings,exportDate:(new Date).toISOString(),version:"1.0"}}importSettings(e){try{return!(!e.settings||"object"!=typeof e.settings)&&(this.settings={...this.getDefaultSettings(),...e.settings},this.saveSettings(),!0)}catch(t){return console.error("Error importing settings:",t),!1}}getDefaultSettings(){return{highlightColor:"#ffeb3b",highlightOpacity:.7,translationService:"bing",targetLanguage:"zh",difficultyLevel:"intermediate",highlightMode:"unknown",autoSave:!0,showTooltips:!0,theme:"light",fontSize:"medium",enableNotifications:!0,reviewReminder:!0,reviewInterval:7,googleDriveSync:!1}}validateSetting(e,t){const n={highlightColor:e=>/^#[0-9A-F]{6}$/i.test(e),highlightOpacity:e=>"number"==typeof e&&e>=0&&e<=1,translationService:e=>["bing","google","yandex"].includes(e),targetLanguage:e=>"string"==typeof e&&2===e.length,difficultyLevel:e=>["common","beginner","intermediate","advanced","expert"].includes(e),highlightMode:e=>["unknown","difficult","all"].includes(e),autoSave:e=>"boolean"==typeof e,showTooltips:e=>"boolean"==typeof e,theme:e=>["light","dark"].includes(e),fontSize:e=>["small","medium","large"].includes(e),enableNotifications:e=>"boolean"==typeof e,reviewReminder:e=>"boolean"==typeof e,reviewInterval:e=>"number"==typeof e&&e>0}[e];return!n||n(t)}getSettingMetadata(e){return{highlightColor:{type:"color",label:"Highlight Color",description:"Color used for highlighting words"},highlightOpacity:{type:"range",label:"Highlight Opacity",description:"Transparency of highlighted words",min:0,max:1,step:.1},translationService:{type:"select",label:"Translation Service",description:"Service used for translations",options:[{value:"bing",label:"Bing Translator"},{value:"google",label:"Google Translate"},{value:"yandex",label:"Yandex Translate"}]},targetLanguage:{type:"text",label:"Target Language",description:"Language code for translations (e.g., zh, es, fr)"},difficultyLevel:{type:"select",label:"Difficulty Level",description:"Base difficulty level for analysis",options:[{value:"common",label:"Common"},{value:"beginner",label:"Beginner"},{value:"intermediate",label:"Intermediate"},{value:"advanced",label:"Advanced"},{value:"expert",label:"Expert"}]},highlightMode:{type:"select",label:"Highlight Mode",description:"Which words to highlight",options:[{value:"unknown",label:"Unknown Words Only"},{value:"difficult",label:"Difficult Words"},{value:"all",label:"All Words"}]},theme:{type:"select",label:"Theme",description:"Application theme",options:[{value:"light",label:"Light"},{value:"dark",label:"Dark"}]},fontSize:{type:"select",label:"Font Size",description:"Text size preference",options:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}]}}[e]||null}loadSettings(){const e=this.getDefaultSettings(),t=localStorage.getItem("wordDiscovererSettings");if(t)try{const n=JSON.parse(t);return{...e,...n}}catch(n){console.error("Error loading settings:",n)}return e}saveSettings(){localStorage.setItem("wordDiscovererSettings",JSON.stringify(this.settings))}}class r{constructor(e){this.element="string"==typeof e?document.querySelector(e):e}addEventListener(e,t,n){const s=this.element.querySelector(e);s&&s.addEventListener(t,n.bind(this))}show(){this.element&&(this.element.style.display="block")}hide(){this.element&&(this.element.style.display="none")}}class l extends r{constructor(e,t){super(e),this.title=t,this.modalContent=null,this.element.innerHTML=this.render(),this.modalContent=this.element.querySelector(".modal-content"),this.element.addEventListener("click",e=>{e.target===this.element&&this.close()});const n=this.element.querySelector(".close-btn");n&&n.addEventListener("click",()=>this.close())}render(){return`\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h2>${this.title}</h2>\n                    <button class="close-btn"><i class="fas fa-times"></i></button>\n                </div>\n                <div class="modal-body">\n                    \x3c!-- Content will be injected here --\x3e\n                </div>\n            </div>\n        `}open(e){const t=this.element.querySelector(".modal-body");t&&(t.innerHTML=e),this.element.offsetHeight,this.element.classList.add("show"),requestAnimationFrame(()=>{this.calculatePosition()})}close(){this.element.classList.remove("show")}calculatePosition(){const e=this.modalContent;if(!e)return;e.style.marginTop="",e.style.marginBottom="",e.offsetHeight;const t=window.innerHeight,n=e.offsetHeight;if(n<t){const s=Math.max(10,(t-n)/2);e.style.marginTop=`${s}px`,e.style.marginBottom="auto"}else e.style.marginTop="10px",e.style.marginBottom="10px"}}class d{constructor(e){this.vocabularyManager=e,this.modal=new l("#vocabularyModal","My Vocabulary"),this.app=null}setApp(e){this.app=e}open(){this.modal.open(this.renderContent()),this.addEventListeners(),this.updateAndRenderLists()}addEventListeners(){document.querySelectorAll(".vocab-tab").forEach(e=>{e.addEventListener("click",e=>this.handleTabClick(e))}),document.getElementById("exportVocabBtn").addEventListener("click",()=>this.onExportVocabulary()),document.getElementById("importVocabBtn").addEventListener("click",()=>document.getElementById("importFile").click()),document.getElementById("importFile").addEventListener("change",e=>this.onImportFileChange(e)),document.getElementById("clearVocabBtn").addEventListener("click",()=>this.onClearVocabulary())}renderContent(){return'\n            <div class="vocab-controls">\n                <button class="btn btn-primary" id="exportVocabBtn"><i class="fas fa-download"></i> Export</button>\n                <button class="btn btn-secondary" id="importVocabBtn"><i class="fas fa-upload"></i> Import</button>\n                <input type="file" id="importFile" accept=".json" style="display: none;">\n                <button class="btn btn-danger" id="clearVocabBtn"><i class="fas fa-trash"></i> Clear All</button>\n            </div>\n            <div class="vocab-tabs">\n                <button class="vocab-tab active" data-tab="learning">Learning (<span id="learning-count">0</span>)</button>\n                <button class="vocab-tab" data-tab="mastered">Mastered (<span id="mastered-count">0</span>)</button>\n            </div>\n            <div id="learning-list-container" class="vocab-tab-content active">\n                <div class="vocab-list" id="learning-list"></div>\n            </div>\n            <div id="mastered-list-container" class="vocab-tab-content">\n                <div class="vocab-list" id="mastered-list"></div>\n            </div>\n        '}updateAndRenderLists(){const e=document.getElementById("learning-list"),t=document.getElementById("mastered-list");if(!e||!t)return;const n=this.vocabularyManager.getSortedByDate(this.vocabularyManager.learningWords);this.renderList(e,n,"learning");const s=this.vocabularyManager.getSortedByDate(this.vocabularyManager.masteredWords);this.renderList(t,s,"mastered"),this.updateCounts()}renderList(e,t,n){e.innerHTML="",0!==t.length?(t.forEach(([t,s])=>{const o="learning"===n?`<button class="btn btn-sm btn-success master-btn" data-word="${t}"><i class="fas fa-check"></i> Master</button>`:`<button class="btn btn-sm btn-info unmaster-btn" data-word="${t}"><i class="fas fa-undo"></i> Learn</button>`,i=document.createElement("div");i.className="vocab-item",i.innerHTML=`\n                <div>\n                    <div class="vocab-word">${t}</div>\n                    <div class="vocab-translation">${s.translation}</div>\n                    <div class="vocab-meta">Added: ${new Date(s.addedDate).toLocaleDateString()}</div>\n                </div>\n                <div class="vocab-actions">\n                    ${o}\n                    <button class="btn btn-sm btn-danger delete-btn" data-word="${t}"><i class="fas fa-trash"></i></button>\n                </div>\n            `,e.appendChild(i)}),e.querySelectorAll(".master-btn").forEach(e=>e.addEventListener("click",e=>this.masterWord(e.currentTarget.dataset.word))),e.querySelectorAll(".unmaster-btn").forEach(e=>e.addEventListener("click",e=>this.unmasterWord(e.currentTarget.dataset.word))),e.querySelectorAll(".delete-btn").forEach(e=>e.addEventListener("click",e=>this.removeFromVocabulary(e.currentTarget.dataset.word)))):e.innerHTML='<p style="text-align: center; color: #6b7280; padding: 2rem;">No words in this list yet.</p>'}updateCounts(){const e=this.vocabularyManager.getLearningSize(),t=this.vocabularyManager.masteredWords.size,n=document.getElementById("vocabCount");n&&(n.textContent=e);const s=document.getElementById("learning-count");s&&(s.textContent=e);const o=document.getElementById("mastered-count");o&&(o.textContent=t)}handleTabClick(e){const t=e.target,n=t.dataset.tab;document.querySelectorAll(".vocab-tab").forEach(e=>e.classList.remove("active")),t.classList.add("active"),document.querySelectorAll(".vocab-tab-content").forEach(e=>e.classList.remove("active")),document.getElementById(`${n}-list-container`).classList.add("active")}masterWord(e){this.vocabularyManager.masterWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' moved to mastered list.`),this.app.refreshTextAnalysis())}unmasterWord(e){this.vocabularyManager.unmasterWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' moved back to learning list.`),this.app.refreshTextAnalysis())}removeFromVocabulary(e){confirm(`Are you sure you want to permanently delete "${e}"?`)&&this.vocabularyManager.removeWord(e)&&(this.updateAndRenderLists(),this.app.showNotification(`'${e}' has been deleted.`,"info"),this.app.refreshTextAnalysis())}onExportVocabulary(){const e=this.vocabularyManager.exportVocabulary();this.app.downloadJSON(e,"word-discoverer-vocabulary.json"),this.app.showNotification("Vocabulary exported successfully!")}onImportFileChange(e){const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target.result);this.vocabularyManager.importVocabulary(t)?(this.updateAndRenderLists(),this.app.showNotification("Vocabulary imported successfully!"),this.app.refreshTextAnalysis()):this.app.showNotification("Error importing vocabulary. Check file format.","error")}catch(t){this.app.showNotification("Error importing vocabulary. Check file format.","error")}},n.readAsText(t)}onClearVocabulary(){confirm("Clear all vocabulary (both learning and mastered)? This action cannot be undone.")&&(this.vocabularyManager.clearVocabulary(),this.updateAndRenderLists(),this.app.showNotification("All vocabulary has been cleared."),this.app.refreshTextAnalysis())}}class c{constructor(e,t){this.settingsManager=e,this.googleDriveManager=t,this.modal=new l("#settingsModal","Settings"),this.app=null,this.userInfo=null,this.lastSyncTime=null}setApp(e){this.app=e}open(){this.modal.open(this.renderContent()),this.loadSettingsToUI(),this.addEventListeners(),this.updateGoogleDriveStatus()}addEventListeners(){const e=document.getElementById("highlightOpacity");e&&e.addEventListener("input",e=>this.onOpacityChange(e));const t=document.getElementById("highlightColor");t&&t.addEventListener("change",e=>this.onColorChange(e));const n=document.getElementById("difficultyLevel");n&&n.addEventListener("change",e=>{this.settingsManager.setSetting("difficultyLevel",e.target.value);const t=document.getElementById("mainDifficultyLevel");t&&t.value!==e.target.value&&(t.value=e.target.value)});const s=document.getElementById("highlightMode");s&&s.addEventListener("change",e=>{this.settingsManager.setSetting("highlightMode",e.target.value);const t=document.getElementById("mainHighlightMode");t&&t.value!==e.target.value&&(t.value=e.target.value)});const o=document.getElementById("exportSettingsBtn");o&&o.addEventListener("click",()=>this.onExportSettings());const i=document.getElementById("importSettingsBtn");i&&i.addEventListener("click",()=>{const e=document.getElementById("importSettingsFile");e&&e.click()});const a=document.getElementById("importSettingsFile");a&&a.addEventListener("change",e=>this.onImportSettingsFileChange(e));const r=document.getElementById("enableGoogleDriveBtn");r&&r.addEventListener("click",()=>this.onEnableGoogleDrive());const l=document.getElementById("syncNowBtn");l&&l.addEventListener("click",()=>this.onSyncNow());const d=document.getElementById("disconnectGoogleDriveBtn");d&&d.addEventListener("click",()=>this.onDisconnectGoogleDrive())}renderContent(){return`\n            <div class="settings-section">\n                <h3>Highlighting</h3>\n                <div class="setting-item">\n                    <label for="highlightColor">Highlight Color:</label>\n                    <input type="color" id="highlightColor">\n                </div>\n                <div class="setting-item">\n                    <label for="highlightOpacity">Opacity:</label>\n                    <input type="range" id="highlightOpacity" min="0.1" max="1" step="0.1">\n                    <span id="opacityValue"></span>\n                </div>\n            </div>\n            <div class="settings-section">\n                <h3>Analysis</h3>\n                <div class="setting-item">\n                    <label for="difficultyLevel">Difficulty Level:</label>\n                    <select id="difficultyLevel">\n                        <option value="beginner">Beginner</option>\n                        <option value="intermediate">Intermediate</option>\n                        <option value="advanced">Advanced</option>\n                        <option value="expert">Expert</option>\n                    </select>\n                </div>\n                <div class="setting-item">\n                    <label for="highlightMode">Highlight Mode:</label>\n                    <select id="highlightMode">\n                        <option value="unknown">Unknown Words Only</option>\n                        <option value="difficult">Difficult Words</option>\n                        <option value="all">All Words</option>\n                    </select>\n                </div>\n            </div>\n            <div class="settings-section">\n                <h3>Google Drive Sync</h3>\n                \x3c!-- Google Drive UI will be rendered here --\x3e\n                <div id="google-drive-section">${this.renderGoogleDriveUI()}</div>\n            </div>\n            <div class="settings-section">\n                <h3>Data Management</h3>\n                <div class="setting-item">\n                    <button class="btn btn-primary" id="exportSettingsBtn"><i class="fas fa-download"></i> Export Settings</button>\n                    <button class="btn btn-secondary" id="importSettingsBtn"><i class="fas fa-upload"></i> Import Settings</button>\n                    <input type="file" id="importSettingsFile" accept=".json" style="display: none;">\n                </div>\n            </div>\n        `}renderGoogleDriveUI(){const e=this.googleDriveManager.getAuthStatus();return e.isInitialized?e.isSignedIn?`\n            <div class="google-drive-status">\n                <div class="user-info">\n                    ${this.userInfo&&this.userInfo.imageUrl?`<img src="${this.userInfo.imageUrl}" alt="User Avatar" class="user-avatar">`:'<div class="user-avatar-placeholder"><i class="fas fa-user"></i></div>'}\n                    <div class="user-details">\n                        <div class="user-name">${this.userInfo?.name||"Google User"}</div>\n                        <div class="user-email">${this.userInfo?.email||"No email provided"}</div>\n                    </div>\n                </div>\n                \n                <div class="sync-controls">\n                    <button class="btn btn-primary" id="syncNowBtn">\n                        <i class="fas fa-sync-alt"></i> Sync Now\n                    </button>\n                    <button class="btn btn-secondary" id="disconnectGoogleDriveBtn">\n                        <i class="fas fa-sign-out-alt"></i> Disconnect\n                    </button>\n                </div>\n                \n                ${this.lastSyncTime?`<div class="sync-info">\n                        <div class="last-sync">\n                            <i class="fas fa-check-circle"></i>\n                            <span>Last synced: ${new Date(this.lastSyncTime).toLocaleString()}</span>\n                        </div>\n                    </div>`:'<div class="sync-info">\n                        <div class="last-sync">\n                            <i class="fas fa-info-circle"></i>\n                            <span>Never synced</span>\n                        </div>\n                    </div>'}\n            </div>\n        `:'\n                <div class="google-drive-status">\n                    <div class="status-indicator">\n                        <i class="fas fa-unlink"></i>\n                        <span>Google Drive not connected</span>\n                    </div>\n                    <button class="btn btn-success" id="enableGoogleDriveBtn">\n                        <i class="fab fa-google"></i> Connect to Google Drive\n                    </button>\n                </div>\n            ':'\n                <div class="google-drive-status">\n                    <div class="status-indicator">\n                        <i class="fas fa-exclamation-circle"></i>\n                        <span>Google Drive not initialized</span>\n                    </div>\n                    <button class="btn btn-primary" id="enableGoogleDriveBtn">\n                        <i class="fab fa-google"></i> Initialize Google Drive\n                    </button>\n                </div>\n            '}async updateGoogleDriveStatus(){try{this.googleDriveManager.isSignedIn&&(this.userInfo=await this.googleDriveManager.getUserInfo());const e=document.getElementById("google-drive-section");e&&(e.innerHTML=this.renderGoogleDriveUI(),this.addEventListeners())}catch(e){console.error("Error updating Google Drive status:",e)}}loadSettingsToUI(){const e=this.settingsManager.getAllSettings();Object.entries(e).forEach(([e,t])=>{const n=document.getElementById(e);if(n)if("range"===n.type){n.value=t;const s=document.getElementById(e+"Value");s&&(s.textContent=Math.round(100*t)+"%")}else n.value=t});const t=document.getElementById("mainDifficultyLevel");t&&(t.value=e.difficultyLevel||"intermediate");const n=document.getElementById("mainHighlightMode");n&&(n.value=e.highlightMode||"unknown")}onOpacityChange(e){const t=parseFloat(e.target.value),n=document.getElementById("opacityValue");n&&(n.textContent=Math.round(100*t)+"%"),this.settingsManager.setSetting("highlightOpacity",t)}onColorChange(e){this.settingsManager.setSetting("highlightColor",e.target.value)}onExportSettings(){const e=this.settingsManager.exportSettings();this.app.downloadJSON(e,"settings.json"),this.app.showNotification("Settings exported successfully!")}onImportSettingsFileChange(e){const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target.result);this.settingsManager.importSettings(t)?(this.loadSettingsToUI(),this.app.showNotification("Settings imported successfully!")):this.app.showNotification("Error importing settings.","error")}catch(t){this.app.showNotification("Error importing settings.","error")}},n.readAsText(t)}async onEnableGoogleDrive(){try{const e=document.getElementById("enableGoogleDriveBtn");e&&(e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Connecting...',e.disabled=!0),this.googleDriveManager.isInitialized||await this.googleDriveManager.initialize();await this.googleDriveManager.signIn()?(this.app.showNotification("Successfully connected to Google Drive!"),await this.updateGoogleDriveStatus()):(this.app.showNotification("Failed to connect to Google Drive.","error"),e&&(e.innerHTML='<i class="fab fa-google"></i> Connect to Google Drive',e.disabled=!1))}catch(e){console.error("Error enabling Google Drive:",e),this.app.showNotification("Error connecting to Google Drive.","error");const t=document.getElementById("enableGoogleDriveBtn");t&&(t.innerHTML='<i class="fab fa-google"></i> Connect to Google Drive',t.disabled=!1)}}async onSyncNow(){try{const e=document.getElementById("syncNowBtn");if(e){const t=e.innerHTML;e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Syncing...',e.disabled=!0;try{const e=this.app.vocabularyManager.exportVocabulary(),t=await this.googleDriveManager.syncVocabulary(e);t.success?(this.lastSyncTime=new Date,this.app.showNotification("Successfully synced with Google Drive!"),await this.updateGoogleDriveStatus(),"download"!==t.action&&"merge"!==t.action||(this.app.vocabularyManager.importVocabulary(t.data),this.app.updateCounts(),this.app.showNotification("Vocabulary updated from Google Drive!"))):this.app.showNotification("Failed to sync with Google Drive: "+t.error,"error")}finally{e.innerHTML=t,e.disabled=!1}}}catch(e){console.error("Error syncing with Google Drive:",e),this.app.showNotification("Error syncing with Google Drive.","error");const t=document.getElementById("syncNowBtn");t&&(t.innerHTML='<i class="fas fa-sync-alt"></i> Sync Now',t.disabled=!1)}}async onDisconnectGoogleDrive(){try{await this.googleDriveManager.signOut()?(this.userInfo=null,this.lastSyncTime=null,this.app.showNotification("Disconnected from Google Drive."),await this.updateGoogleDriveStatus()):this.app.showNotification("Failed to disconnect from Google Drive.","error")}catch(e){console.error("Error disconnecting from Google Drive:",e),this.app.showNotification("Error disconnecting from Google Drive.","error")}}}class h extends r{constructor(e,t){super(e),this.vocabularyManager=t,this.app=null,this.currentWord=null,this.currentTranslation=null}setApp(e){this.app=e}render(e){this.element.innerHTML=e,this.addEventListeners()}addEventListeners(){this.element.addEventListener("click",e=>{if(e.target.classList.contains("word-span")){const t=e.target.dataset.word,n=e.target.dataset.translation;this.showWordModal(t,n,e)}})}showWordModal(e,t,n){this.currentWord=e,this.currentTranslation=t;const s=document.getElementById("wordModal");document.getElementById("wordModalContent");const o=document.getElementById("wordModalTitle"),i=document.getElementById("wordModalTranslation"),a=document.getElementById("wordModalActions");if(o.textContent=e,t.includes("<")&&t.includes(">")?i.innerHTML=t:i.textContent=t,a.innerHTML="",this.vocabularyManager.masteredWords.has(e)){const t=document.createElement("button");t.textContent="Move to Learning List",t.className="btn btn-secondary",t.onclick=()=>{this.handleWordUnmaster(e),this.closeWordModal()},a.appendChild(t)}else if(this.vocabularyManager.learningWords.has(e)){const n=document.createElement("button");n.textContent="Mark as Mastered",n.className="btn btn-primary",n.onclick=()=>{this.handleWordMaster(e,t),this.closeWordModal()},a.appendChild(n)}else{const n=document.createElement("button");n.textContent="Add to Learning List",n.className="btn btn-primary",n.onclick=()=>{this.handleWordAddToLearning(e,t),this.closeWordModal()},a.appendChild(n);const s=document.createElement("button");s.textContent="Add to Mastered List",s.className="btn btn-secondary",s.onclick=()=>{this.handleWordMaster(e,t),this.closeWordModal()},a.appendChild(s)}const r=document.createElement("button");r.textContent="Close",r.className="btn btn-outline",r.onclick=()=>this.closeWordModal(),a.appendChild(r),s.classList.add("show"),s.onclick=e=>{e.target===s&&this.closeWordModal()}}closeWordModal(){document.getElementById("wordModal").classList.remove("show")}handleWordAddToLearning(e,t){this.vocabularyManager.addWord(e,t)&&this.app.showNotification(`📖 '${e}' added to learning list.`),this.app.updateCounts(),this.refreshTextAnalysis()}handleWordMaster(e,t){const n=this.vocabularyManager.masterWord(e,t);"added_to_mastered"!==n&&"moved_to_mastered"!==n||this.app.showNotification(`✅ '${e}' marked as mastered.`),this.app.updateCounts(),this.refreshTextAnalysis()}handleWordUnmaster(e){"moved_to_learning"===this.vocabularyManager.unmasterWord(e)&&(this.app.showNotification(`📖 '${e}' moved to learning list.`),this.app.updateCounts()),this.refreshTextAnalysis()}refreshTextAnalysis(){const e=document.getElementById("textInput").value;if(!e)return;const t=this.app.performTextAnalysis(e),n=this.app.textAnalyzer.processTextForDisplay(e,t);this.render(n),this.app.updateStatistics&&this.app.updateStatistics(t)}}class g{constructor(){this.settingsManager=new a,this.wordDatabase=new n,this.vocabularyManager=new i,this.textAnalyzer=new s(this.wordDatabase),this.vocabularyComponent=new d(this.vocabularyManager),this.settingsComponent=new c(this.settingsManager,this.vocabularyManager.googleDriveManager),this.analyzedTextComponent=new h("#analyzedText",this.vocabularyManager),this.vocabularyComponent.setApp(this),this.settingsComponent.setApp(this),this.analyzedTextComponent.setApp(this),this.initialize()}async initialize(){this.addEventListeners(),this.updateCounts();const e=document.getElementById("dbLoadingOverlay"),t=document.getElementById("dbProgressBar"),n=document.getElementById("dbProgressPercentage"),s=document.getElementById("dbProgressChunks"),o=document.getElementById("dbLoadingMessage");e.classList.add("show"),this.wordDatabase.setProgressCallback(e=>{t.style.width=`${e.percentage.toFixed(1)}%`,n.textContent=`${e.percentage.toFixed(1)}%`,o.textContent=e.message||"Loading..."}),this.wordDatabase.progressiveLoader&&(this.wordDatabase.progressiveLoader.on("chunkLoaded",e=>{s.textContent=`${e.loaded}/${e.total} chunks`}),this.wordDatabase.progressiveLoader.on("complete",()=>{setTimeout(()=>{e.classList.remove("show")},1e3)})),await this.wordDatabase.initialize(),setTimeout(()=>{e.classList.remove("show")},500),console.log("WordDiscoverer initialized successfully")}addEventListeners(){document.getElementById("analyzeBtn").addEventListener("click",()=>this.analyzeText()),document.getElementById("vocabularyBtn").addEventListener("click",()=>this.vocabularyComponent.open()),document.getElementById("settingsBtn").addEventListener("click",()=>this.settingsComponent.open()),document.getElementById("clearBtn").addEventListener("click",()=>this.clearText());const e=document.getElementById("wordModalClose");e&&e.addEventListener("click",()=>{document.getElementById("wordModal").classList.remove("show")});const t=document.getElementById("mainDifficultyLevel");t&&t.addEventListener("change",e=>{this.settingsManager.setSetting("difficultyLevel",e.target.value),this.refreshTextAnalysis()});const n=document.getElementById("mainHighlightMode");n&&n.addEventListener("change",e=>{this.settingsManager.setSetting("highlightMode",e.target.value),this.refreshTextAnalysis()})}async analyzeText(){const e=document.getElementById("textInput").value.trim();if(!e)return void this.showNotification("Please enter some text to analyze.","error");const t=document.getElementById("loadingOverlay");t.classList.add("show");try{const t=this.performTextAnalysis(e),n=this.textAnalyzer.processTextForDisplay(e,t);this.analyzedTextComponent.render(n),document.getElementById("analyzedTextSection").style.display="block",document.getElementById("statistics").style.display="flex",document.getElementById("highlightedWordsList").style.display="block",this.updateStatistics(t),this.displayHighlightedWords(t.highlightedWords)}catch(n){console.error("Analysis error:",n),this.showNotification("Error analyzing text. Please try again.","error")}finally{t.classList.remove("show")}}performTextAnalysis(e){const t=this.textAnalyzer.extractWords(e);return this.textAnalyzer.analyzeWords(t,this.settingsManager.getSetting("difficultyLevel"),this.settingsManager.getSetting("highlightMode"),{learning:this.vocabularyManager.learningWords,mastered:this.vocabularyManager.masteredWords})}refreshTextAnalysis(){if("block"!==document.getElementById("analyzedTextSection").style.display)return;const e=document.getElementById("textInput").value.trim();if(!e)return;const t=this.performTextAnalysis(e),n=this.textAnalyzer.processTextForDisplay(e,t);this.analyzedTextComponent.render(n),this.updateStatistics(t),this.displayHighlightedWords(t.highlightedWords)}updateStatistics(e){document.getElementById("totalWords").textContent=e.totalWords,document.getElementById("highlightedWords").textContent=e.highlightedWords.length,document.getElementById("newWords").textContent=e.newWords.length,document.getElementById("difficultyScore").textContent=e.difficultyScore}displayHighlightedWords(e){const t=document.getElementById("highlightedWordsContainer");t.innerHTML="",0!==e.length?e.forEach(e=>{const n=document.createElement("div");n.className="highlighted-word-item";const s=document.createElement("div");s.innerHTML=e.translation;let o="",i="";const a=s.querySelector(".pron");a&&(o=a.textContent.trim());const r=s.querySelector(".trans");r&&(i=r.textContent.trim()),a||r||(i=e.translation),n.innerHTML=`\n                <div class="word">${e.word}</div>\n                ${o?`<div class="pronunciation">/${o}/</div>`:""}\n                <div class="translation">${i}</div>\n            `,t.appendChild(n)}):t.innerHTML="<p>No highlighted words found.</p>"}updateCounts(){this.vocabularyComponent.updateCounts()}showNotification(e,t="success"){const n=document.createElement("div"),s={success:"#10b981",error:"#ef4444",info:"#3b82f6"};n.style.cssText=`\n            position: fixed; top: 20px; right: 20px; background: ${s[t]||s.success}; color: white;\n            padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            z-index: 3000; animation: slideIn 0.3s ease; max-width: 300px; word-wrap: break-word;\n        `,n.textContent=e,document.body.appendChild(n),setTimeout(()=>n.remove(),3e3)}downloadJSON(e,t){const n=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(n),o=document.createElement("a");o.href=s,o.download=t,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(s)}clearText(){document.getElementById("textInput").value="",document.getElementById("analyzedTextSection").style.display="none",document.getElementById("statistics").style.display="none",document.getElementById("highlightedWordsList").style.display="none",document.getElementById("analyzedText").innerHTML="",document.getElementById("totalWords").textContent="0",document.getElementById("highlightedWords").textContent="0",document.getElementById("newWords").textContent="0",document.getElementById("difficultyScore").textContent="0",document.getElementById("highlightedWordsContainer").innerHTML=""}}document.addEventListener("DOMContentLoaded",()=>{window.wordDiscoverer=new g});
